-- The configuration has an implict
-- require('scripts/configuration_helper.lua')
-- which defines helper functions useful to customize the configuration

-- Determines which SGCT configuration file is loaded, that is, if there rendering
-- occurs in a single window, a fisheye projection, or a dome cluster system

-- A regular 1280x720 window
SGCTConfig = sgct.config.single{}

-- A regular 1920x1080 window
-- SGCTConfig = sgct.config.single{1920, 1080}

-- A windowed 1920x1080 fullscreen
-- SGCTConfig = sgct.config.single{1920, 1080, border=false, windowPos={0,0}, shared=true, name="WV_OBS_SPOUT1"}

-- A 1k fisheye rendering
-- SGCTConfig = sgct.config.fisheye{1024, 1024}

-- A 4k fisheye rendering in a 1024x1024 window
-- SGCTConfig = sgct.config.fisheye{1024, 1024, res={4096, 4096}, quality="2k", tilt=27}

-- Streaming OpenSpace via Spout to OBS
-- SGCTConfig = sgct.config.single{2560, 1440, shared=true, name="WV_OBS_SPOUT1"}

-- Stereo
-- SGCTConfig = "${CONFIG}/stereo.xml"

-- Spout exit
-- SGCTConfig = "${CONFIG}/spout_output.xml"

-- SGCTConfig = "${CONFIG}/openvr_oculusRiftCv1.xml"
-- SGCTConfig = "${CONFIG}/openvr_htcVive.xml"

-- Sets the scene that is to be loaded by OpenSpace. A scene file is a description
-- of all entities that will be visible during an instance of OpenSpace

-- Asset = "default"
-- Asset = "default_full"
-- Asset = "newhorizons"
-- Asset = "rosetta"
Asset = "osirisrex"
-- Asset = "voyager"
-- Asset = "juno"

-- These scripts are executed after the initialization of each scene, thus making
-- it possible to have global overrides to default values or execute other scripts
-- regardless of the scene that is loaded
GlobalCustomizationScripts = {
    "${SCRIPTS}/customization.lua"
}

Paths = {
    DATA = "${BASE}/data",
    ASSETS = "${DATA}/assets",
    FONTS = "${DATA}/fonts",
    TASKS = "${DATA}/tasks",
    SYNC = "${BASE}/sync",
    SCREENSHOTS = "${BASE}/screenshots",
    WEB = "${DATA}/web",

    CACHE = "${BASE}/cache",
    CONFIG = "${BASE}/config",
    DOCUMENTATION = "${BASE}/documentation",
    LOGS = "${BASE}/logs",
    MODULES = "${BASE}/modules",
    SCRIPTS = "${BASE}/scripts",
    SHADERS = "${BASE}/shaders"
}
Fonts = {
    Mono = "${FONTS}/Bitstream-Vera-Sans-Mono/VeraMono.ttf",
    Light = "${FONTS}/Roboto/Roboto-Regular.ttf",
    Console = "${FONTS}/Inconsolata/Inconsolata-Regular.ttf",
    Loading = "${FONTS}/Roboto/Roboto-Regular.ttf"
}
Logging = {
    LogDir = "${LOGS}",
    -- LogLevel = "Trace",
    LogLevel = "Debug",
    ImmediateFlush = true,
    Logs = {
        { Type = "html", File = "${LOGS}/log.html", Append = false }
    },
    CapabilitiesVerbosity = "Full"
}
ScriptLog = "${LOGS}/ScriptLog.txt"

Documentation = {
    LuaDocumentation = "${DOCUMENTATION}/LuaScripting.html",
    PropertyDocumentation = "${DOCUMENTATION}/Properties.html",
    ScenePropertyDocumentation = "${DOCUMENTATION}/SceneProperties.html",
    KeyboardShortcuts = "${DOCUMENTATION}/KeyboardMapping.html",
    Documentation = "${DOCUMENTATION}/Documentation.html",
    FactoryDocumentation = "${DOCUMENTATION}/FactoryDocumentation.html",
    LicenseDocumentation = "${DOCUMENTATION}/License.html",
}

UseMultithreadedInitialization = true
LoadingScreen = {
    ShowMessage = true,
    ShowNodeNames = true,
    ShowProgressbar = true
}
CheckOpenGLState = false
LogEachOpenGLCall = false

ShutdownCountdown = 3
ScreenshotUseDate = true
-- OnScreenTextScaling = "framebuffer"
-- PerSceneCache = true
-- DisableRenderingOnMaster = true
-- DisableSceneOnMaster = true
ModuleConfigurations = {
    Sync = {
        SynchronizationRoot = "${SYNC}",
        HttpSynchronizationRepositories = {
            "data.openspaceproject.com/request"
        }
    }
}
RenderingMethod = "Framebuffer"
OpenGLDebugContext = {
   Activate = false,
   FilterIdentifier = {
       { Type = "Other", Source = "API", Identifier = 131185 },
       { Type = "Performance", Source = "API", Identifier = 131186 }, --Buffer performance warning: "copied/moved from VIDEO memory to HOST memory"
       { Type = "Deprecated", Source = "API", Identifier = 7} -- API_ID_LINE_WIDTH deprecated behavior warning has been generated
   },
--      FilterSeverity = { }
}
--RenderingMethod = "ABuffer" -- alternative: "Framebuffer"

ServerPasskey = "secret!"
ClientAddressWhitelist = {
    "127.0.0.1",
    "localhost"
}
WebHelperLocation = "${BASE}/bin/Release/openspace_web_helper"
-- CefWebGuiUrl = "file://${BASE_PATH}/gui/index.html#/onscreen/"
CefWebGuiUrl = "http://localhost:8080/#/onscreen/"
