-- The configuration has an implict
-- require('scripts/configuration_helper.lua')
-- which defines helper functions useful to customize the configuration

return {
    -- Determines which SGCT configuration file is loaded, that is, if there rendering
    -- occurs in a single window, a fisheye projection, or a dome cluster system

    -- A regular 1280x720 window
    SGCTConfig = sgct.config.single{},

    -- A regular 1920x1080 window
    -- SGCTConfig = sgct.config.single{1920, 1080},
    
    -- A windowed 1920x1080 fullscreen
    -- SGCTConfig = sgct.config.single{1920, 1080, border=false, windowPos={0,0}, shared=true, name="WV_OBS_SPOUT1"},

    -- A 1k fisheye rendering
    -- SGCTConfig = sgct.config.fisheye{1024, 1024},

    -- A 4k fisheye rendering in a 1024x1024 window
    -- SGCTConfig = sgct.config.fisheye{1024, 1024, res={4096, 4096}, quality="2k", tilt=27},

    -- Streaming OpenSpace via Spout to OBS
    -- SGCTConfig = sgct.config.single{2560, 1440, shared=true, name="WV_OBS_SPOUT1"},

    --SGCTConfig = "${CONFIG}/openvr_oculusRiftCv1.xml",
    --SGCTConfig = "${CONFIG}/openvr_htcVive.xml",

    -- Sets the scene that is to be loaded by OpenSpace. A scene file is a description
    -- of all entities that will be visible during an instance of OpenSpace
    Scene = "${SCENE}/default.scene",
    -- Scene = "${SCENE}/newhorizons.scene",
    -- Scene = "${SCENE}/rosetta.scene",
    -- Scene = "${SCENE}/osirisrex.scene",

    TasksRoot = "${OPENSPACE_DATA}/tasks",

    -- These scripts are executed after the postInitialization of each scene, thus making
    -- it possible to have global overrides to default values or execute other scripts
    -- regardless of the scene that is loaded
    GlobalCustomizationScripts = {
        "${SCRIPTS}/customization.lua"
    },

    Paths = {
        SCRIPTS = "${BASE_PATH}/scripts",
        SHADERS = "${BASE_PATH}/shaders",
        OPENSPACE_DATA = "${BASE_PATH}/data",
        SCENE = "${OPENSPACE_DATA}/scene",
        SPICE = "${OPENSPACE_DATA}/spice",
        MODULES = "${BASE_PATH}/modules",
        TESTDIR = "${BASE_PATH}/tests",
        CONFIG = "${BASE_PATH}/config",
        CACHE = "${BASE_PATH}/cache",
        FONTS = "${OPENSPACE_DATA}/fonts",
        DOCUMENTATION = "${BASE_PATH}/documentation",
        LOGS = "${BASE_PATH}/logs"
    },
    Fonts = {
        Mono = "${FONTS}/Bitstream-Vera-Sans-Mono/VeraMono.ttf",
        Light = "${FONTS}/Roboto/Roboto-Regular.ttf",
        Console = "${FONTS}/Inconsolata/Inconsolata-Regular.ttf",
        Loading = "${FONTS}/Roboto/Roboto-Regular.ttf"
    },
    Logging = {
        LogDir = "${LOGS}",
        -- LogLevel = "Trace",
        LogLevel = "Debug",
        ImmediateFlush = true,
        Logs = {
            { Type = "html", File = "${LOGS}/log.html", Append = false }
        },
        CapabilitiesVerbosity = "Full"
    },

    Launcher = {
        LogLevel = "None"
    },

    LuaDocumentation = "${DOCUMENTATION}/LuaScripting.html",
    PropertyDocumentation = "${DOCUMENTATION}/Properties.html",
    ScriptLog = "${LOGS}/ScriptLog.txt",
    KeyboardShortcuts = "${DOCUMENTATION}/KeyboardMapping.html",
    Documentation = "${DOCUMENTATION}/Documentation.html",
    FactoryDocumentation = "${DOCUMENTATION}/FactoryDocumentation.html",
    LicenseDocumentation = "${DOCUMENTATION}/License.html",

    UseMultithreadedInitialization = true,
    LoadingScreen = {
        ShowMessage = true,
        ShowNodeNames = true,
        ShowProgressbar = true
    },
    CheckOpenGLState = true,
    LogEachOpenGLCall = true,

    ShutdownCountdown = 3,
    -- OnScreenTextScaling = "framebuffer",
    -- PerSceneCache = true,
    -- DisableRenderingOnMaster = true,
    -- DisableSceneOnMaster = true,
    DownloadRequestURL = "http://data.openspaceproject.com/request.cgi",
    RenderingMethod = "Framebuffer",
    OpenGLDebugContext = {
       Activate = true,
       FilterIdentifier = {
           { Type = "Other", Source = "API", Identifier = 131185 },
           { Type = "Performance", Source = "API", Identifier = 131186 }, --Buffer performance warning: "copied/moved from VIDEO memory to HOST memory"
           { Type = "Deprecated", Source = "API", Identifier = 7} -- API_ID_LINE_WIDTH deprecated behavior warning has been generated
       },
--      FilterSeverity = { }

    }
    -- RenderingMethod = "ABuffer" -- alternative: "Framebuffer"
}
