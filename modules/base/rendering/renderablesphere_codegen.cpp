
// This file has been auto-generated by the codegen tool by running codegen either
// directly or indirectly on:  renderablesphere.cpp
//
// Do not change this file manually as any change will be automatically overwritten,
// instead change the struct tagged with "codegen::Dictionary" in the main file from which
// the code in this file was generated.
//
// If a compiler error brought you here, a struct tagged with "codegen::Dictionary"
// was changed without the codegen tool being run again.

namespace codegen {
template <typename T> openspace::documentation::Documentation doc() {
    static_assert(sizeof(T) == 0); // This should never be called
    return openspace::documentation::Documentation();
}
template <> openspace::documentation::Documentation doc<openspace::RenderableSphere>() {
    using namespace openspace::documentation;
    TableVerifier* codegen_Parameters = new TableVerifier;
    codegen_Parameters->documentations.push_back({"Size",new DoubleVerifier,Optional::No,SizeInfo.description});
    codegen_Parameters->documentations.push_back({"Segments",new IntVerifier,Optional::No,SegmentsInfo.description});
    codegen_Parameters->documentations.push_back({"Texture",new StringVerifier,Optional::No,TextureInfo.description});
    StringInListVerifier* codegen_Parameters_Orientation = new StringInListVerifier({"Outside","Inside","Both"});
    codegen_Parameters->documentations.push_back({"Orientation",codegen_Parameters_Orientation,Optional::Yes,OrientationInfo.description});
    codegen_Parameters->documentations.push_back({"UseAdditiveBlending",new BoolVerifier,Optional::Yes,UseAdditiveBlendingInfo.description});
    codegen_Parameters->documentations.push_back({"MirrorTexture",new BoolVerifier,Optional::Yes,MirrorTextureInfo.description});
    codegen_Parameters->documentations.push_back({"FadeOutThreshold",new InRangeVerifier<DoubleVerifier>(0.0, 1.0),Optional::Yes,FadeOutThresholdInfo.description});
    codegen_Parameters->documentations.push_back({"FadeInThreshold",new DoubleVerifier,Optional::Yes,FadeInThresholdInfo.description});
    codegen_Parameters->documentations.push_back({"DisableFadeInOut",new BoolVerifier,Optional::Yes,DisableFadeInOutInfo.description});
    codegen_Parameters->documentations.push_back({"Background",new BoolVerifier,Optional::Yes,BackgroundInfo.description});

    openspace::documentation::Documentation d = {
        "RenderableSphere",
        "RenderableSphere",
        std::move(codegen_Parameters->documentations)
    };
    delete codegen_Parameters;
    return d;
}
} // namespace codegen


namespace codegen {
namespace internal {
template<typename T> void bakeTo(const ghoul::Dictionary&, std::string_view, T*) { static_assert(sizeof(T) == 0); } // This should never be called
template<typename T> void bakeTo(const ghoul::Dictionary& d, std::string_view key, std::optional<T>* val);
void bakeTo(const ghoul::Dictionary& d, std::string_view key, bool* val) { *val = d.value<bool>(key); }
void bakeTo(const ghoul::Dictionary& d, std::string_view key, double* val) { *val = d.value<double>(key); }
void bakeTo(const ghoul::Dictionary& d, std::string_view key, int* val) { *val = static_cast<int>(d.value<double>(key)); }
void bakeTo(const ghoul::Dictionary& d, std::string_view key, std::string* val) { *val = d.value<std::string>(key); }
void bakeTo(const ghoul::Dictionary& d, std::string_view key, Parameters::Orientation* val) {
    std::string v = d.value<std::string>(key);
    if (v == "Outside") { *val = Parameters::Orientation::Outside; }
    if (v == "Inside") { *val = Parameters::Orientation::Inside; }
    if (v == "Both") { *val = Parameters::Orientation::Both; }
}

template<typename T> void bakeTo(const ghoul::Dictionary& d, std::string_view key, std::optional<T>* val) {
    if (d.hasKey(key)) {
        T v;
        bakeTo(d, key, &v);
        *val = v;
    }
    else *val = std::nullopt;
}

} // namespace internal

template <typename T> T bake(const ghoul::Dictionary&) { static_assert(sizeof(T) == 0); }
template <> Parameters bake<Parameters>(const ghoul::Dictionary& dict) {
    openspace::documentation::testSpecificationAndThrow(codegen::doc<openspace::RenderableSphere>(), dict, "RenderableSphere");
    Parameters res;
    internal::bakeTo(dict, "Size", &res.size);
    internal::bakeTo(dict, "Segments", &res.segments);
    internal::bakeTo(dict, "Texture", &res.texture);
    internal::bakeTo(dict, "Orientation", &res.orientation);
    internal::bakeTo(dict, "UseAdditiveBlending", &res.useAdditiveBlending);
    internal::bakeTo(dict, "MirrorTexture", &res.mirrorTexture);
    internal::bakeTo(dict, "FadeOutThreshold", &res.fadeOutThreshold);
    internal::bakeTo(dict, "FadeInThreshold", &res.fadeInThreshold);
    internal::bakeTo(dict, "DisableFadeInOut", &res.disableFadeInOut);
    internal::bakeTo(dict, "Background", &res.background);
    return res;
}
} // namespace codegen
