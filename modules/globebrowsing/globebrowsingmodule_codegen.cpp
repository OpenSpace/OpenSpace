
// This file has been auto-generated by the codegen tool by running codegen either
// directly or indirectly on:  globebrowsingmodule.cpp
//
// Do not change this file manually as any change will be automatically overwritten,
// instead change the struct tagged with "codegen::Dictionary" in the main file from which
// the code in this file was generated.
//
// If a compiler error brought you here, a struct tagged with "codegen::Dictionary"
// was changed without the codegen tool being run again.

namespace codegen {
template <typename T> openspace::documentation::Documentation doc() {
    static_assert(sizeof(T) == 0); // This should never be called
}
template <> openspace::documentation::Documentation doc<openspace::GlobeBrowsingModule>() {
    using namespace openspace::documentation;
    TableVerifier* codegen_Parameters = new TableVerifier;
    codegen_Parameters->documentations.push_back({"WMSCacheEnabled",new BoolVerifier,Optional::Yes,""});
    codegen_Parameters->documentations.push_back({"OfflineMode",new BoolVerifier,Optional::Yes,""});
    codegen_Parameters->documentations.push_back({"WMSCacheLocation",new StringVerifier,Optional::Yes,""});
    codegen_Parameters->documentations.push_back({"WMSCacheSize",new IntVerifier,Optional::Yes,""});
    codegen_Parameters->documentations.push_back({"TileCacheSize",new IntVerifier,Optional::Yes,""});
    codegen_Parameters->documentations.push_back({"NoWarning",new BoolVerifier,Optional::Yes,""});

    openspace::documentation::Documentation d = {
        "GlobeBrowsingModule",
        "GlobeBrowsingModule",
        std::move(codegen_Parameters->documentations)
    };
    delete codegen_Parameters;
    return d;
}
} // namespace codegen


namespace codegen {
namespace internal {
template<typename T> void bakeTo(const ghoul::Dictionary&, std::string_view, T*) { static_assert(sizeof(T) == 0); } // This should never be called
template<typename T> void bakeTo(const ghoul::Dictionary& d, std::string_view key, std::optional<T>* val);
void bakeTo(const ghoul::Dictionary& d, std::string_view key, bool* val) { *val = d.value<bool>(key); }
void bakeTo(const ghoul::Dictionary& d, std::string_view key, int* val) { *val = static_cast<int>(d.value<double>(key)); }

template<typename T> void bakeTo(const ghoul::Dictionary& d, std::string_view key, std::optional<T>* val) {
    if (d.hasKey(key)) {
        T v;
        bakeTo(d, key, &v);
        *val = v;
    }
    else *val = std::nullopt;
}
void bakeTo(const ghoul::Dictionary& d, std::string_view key, std::string* val) { *val = d.value<std::string>(key); }

} // namespace internal

template <typename T> T bake(const ghoul::Dictionary&) { static_assert(sizeof(T) == 0); };
template <> Parameters bake<Parameters>(const ghoul::Dictionary& dict) {
    openspace::documentation::testSpecificationAndThrow(codegen::doc<openspace::GlobeBrowsingModule>(), dict, "GlobeBrowsingModule");
    Parameters res;
    internal::bakeTo(dict, "WMSCacheEnabled", &res.cacheEnabled);
    internal::bakeTo(dict, "OfflineMode", &res.offlineMode);
    internal::bakeTo(dict, "WMSCacheLocation", &res.cacheLocation);
    internal::bakeTo(dict, "WMSCacheSize", &res.wmsCacheSize);
    internal::bakeTo(dict, "TileCacheSize", &res.tileCacheSize);
    internal::bakeTo(dict, "NoWarning", &res.noWarning);
    return res;
}
} // namespace codegen
