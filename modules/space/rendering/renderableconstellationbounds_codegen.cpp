
// This file has been auto-generated by the codegen tool by running codegen either
// directly or indirectly on:  A:\OpenSpace\modules\space\rendering\renderableconstellationbounds.cpp
//
// Do not change this file manually as any change will be automatically overwritten,
// instead change the struct tagged with "codegen::Dictionary" in the main file from which
// the code in this file was generated.
//
// If a compiler error brought you here, a struct tagged with "codegen::Dictionary"
// was changed without the codegen tool being run again.

namespace codegen {
template <typename T> openspace::documentation::Documentation doc() {
    static_assert(sizeof(T) == 0); // This should never be called
}
template <> openspace::documentation::Documentation doc<openspace::RenderableConstellationBounds>() {
    using namespace openspace::documentation;
    TableVerifier* codegen_Parameters = new TableVerifier;
    codegen_Parameters->documentations.push_back({"File",new StringVerifier,Optional::No,VertexInfo.description});
    codegen_Parameters->documentations.push_back({"ConstellationFile",new StringVerifier,Optional::Yes,"Specifies the file that contains the mapping between constellation abbreviations and full name of the constellation. If the file is omitted, the abbreviations are used as the full names"});
    codegen_Parameters->documentations.push_back({"Color",new DoubleVector3Verifier,Optional::Yes,ColorInfo.description});
    codegen_Parameters->documentations.push_back({"LineWidth",new DoubleVerifier,Optional::Yes,LineWidthInfo.description});
    codegen_Parameters->documentations.push_back({"ConstellationSelection",new TableVerifier({{"*",new StringVerifier,Optional::Yes, }})
,Optional::Yes,SelectionInfo.description});

    openspace::documentation::Documentation d = {
        "RenderableConstellationBounds",
        "RenderableConstellationBounds",
        std::move(codegen_Parameters->documentations)
    };
    delete codegen_Parameters;
    return d;
}
} // namespace codegen


namespace codegen {
namespace internal {
template<typename T> void bakeTo(const ghoul::Dictionary&, std::string_view, T*) { static_assert(sizeof(T) == 0); } // This should never be called
void bakeTo(const ghoul::Dictionary& d, std::string_view key, float* val) { *val = static_cast<float>(d.value<double>(key)); }
void bakeTo(const ghoul::Dictionary& d, std::string_view key, glm::vec3* val) { *val = d.value<glm::dvec3>(key); }

template<typename T> void bakeTo(const ghoul::Dictionary& d, std::string_view key, std::optional<T>* val) {
    if (d.hasKey(key)) {
        T v;
        bakeTo(d, key, &v);
        *val = v;
    }
    else *val = std::nullopt;
}
void bakeTo(const ghoul::Dictionary& d, std::string_view key, std::string* val) { *val = d.value<std::string>(key); }

template<typename T> void bakeTo(const ghoul::Dictionary& d, std::string_view key, std::vector<T>* val) {
    ghoul::Dictionary dict = d.value<ghoul::Dictionary>(key);
    std::vector<std::string_view> keys = dict.keys();
    val->reserve(keys.size());
    for (size_t i = 0; i < dict.size(); ++i) {
        T v;
        bakeTo(dict, keys[i], &v);
        val->push_back(std::move(v));
    }
}

} // namespace internal

template <typename T> T bake(const ghoul::Dictionary& dict) { static_assert(sizeof(T) == 0); };
template <> Parameters bake<Parameters>(const ghoul::Dictionary& dict) {
    openspace::documentation::testSpecificationAndThrow(codegen::doc<openspace::RenderableConstellationBounds>(), dict, "RenderableConstellationBounds");
    Parameters res;
    internal::bakeTo(dict, "File", &res.file);
    internal::bakeTo(dict, "ConstellationFile", &res.constellationFile);
    internal::bakeTo(dict, "Color", &res.color);
    internal::bakeTo(dict, "LineWidth", &res.lineWidth);
    internal::bakeTo(dict, "ConstellationSelection", &res.constellationSelection);
    return res;
}
} // namespace codegen
