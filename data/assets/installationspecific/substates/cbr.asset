local util = asset.require('./../utility_functions')
local flyHome = asset.require('./../fly_home_alternatives')

----------------------------------------------------------------
-- STATES
----------------------------------------------------------------

-- No zoom, can "zoom" to predetermined distances using the buttons on the webpage
local cbrState = {
    Identifier = "CBR",
    Enter = [[
        ]] .. util.setOrbitSpeedFactor(0.4) .. [[
        ]] .. util.startOrbiting() .. [[
        ]] .. util.orbitOnArrival() .. [[
        openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.LimitZoomOut.Enabled", false);
        openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.EnabledMinimumAllowedDistanceLimit", false);
        openspace.setPropertyValueSingle('Modules.Touch.TouchInteraction.DisableZoom', true);
        openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.DisableZoom", true);
    ]],
    Exit = [[
        ]] .. util.stopOrbiting() .. [[
          openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.DisableZoom", false);
        openspace.setPropertyValueSingle('Modules.Touch.TouchInteraction.DisableZoom', false);
    ]]
}

local states = { cbrState }

----------------------------------------------------------------
-- TRANSITIONS within this substate
----------------------------------------------------------------

local transitions = {
  -- Transition to/from this state
  {
    From = "Home",
    To = "CBR",
    Action = [[]] -- This flight happens on the webpage
  },
  {
    From = "CBR",
    To = "Home",
    Action = flyHome.linearFlight
  }
}

asset.export("states", states)
asset.export("transitions", transitions)
