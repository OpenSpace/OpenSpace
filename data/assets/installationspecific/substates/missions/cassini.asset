local assetHelper = asset.require('util/asset_helper')
local util = asset.require('./../../utility_functions')
local flyHome = asset.require('./../../fly_home_alternatives')
local textImagefolder = asset.localResource("s./../../../screenspacetexts")
textImagefolder = textImagefolder:gsub('\\', '/')

----------------------------------------------------------------
-- SCRIPTS
----------------------------------------------------------------
local cassiniStart = "2004-06-16T08:14:57.000" -- Primary mission start
local missionEquinoxStart = "2008-08-09T00:00:00.000"
local missionSolsticeStart = "2010-11-24T00:00:00.000"
local grandFinaleStart = "2017-04-26T00:00:00.000"
local cassiniEnd = "2017-09-15T10:34:05.000"

local orbitInsertionDistance = 9000000000
local primaryDistance = 2500000000
local equinoxDistance = 1500000000
local solsticeDistance = 650000000
local grandFinaleDistance = 400000000

local cassiniNavigationState = [[{ Anchor = 'Saturn', Pitch = -0.000071, Position = { 3641029278.891357, 7812048554.762817, -1533586357.197266 }, ReferenceFrame = 'Root', Up = { -0.739154, 0.443940, 0.506525 }, Yaw = 0.003681 }]]

local cassiniScripts = [[
  -- Primary start
  openspace.scriptScheduler.loadScheduledScript(
    "2004-06-16T08:14:58.000", -- 1 sec pre delay
    "openspace.setPropertyValueSingle('ScreenSpace.Cassini-Mission-Part-Description.TexturePath', ']] .. textImagefolder .. '/text-cassini-primarauppdraget.png' .. [[')" ..
    "openspace.setPropertyValueSingle('ScreenSpace.Cassini-Mission-Part-Description.Enabled', true)" ..
    "openspace.setPropertyValueSingle('ScreenSpace.Cassini-Time-Speed-Description.TexturePath', ']] .. textImagefolder .. '/text-speed_10dayspersecond.png' .. [[')" ..
    "openspace.setPropertyValueSingle('ScreenSpace.Cassini-Time-Speed-Description.Enabled', true)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.FlightDestinationDistance', ]] .. tostring(orbitInsertionDistance) .. [[)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.VelocityZoomControl', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.ApplyLinearFlight', true)" ..
    "openspace.time.interpolateDeltaTime(864000)" .. -- 10 days per second
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Saturn')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Focus on Saturn again
  openspace.scriptScheduler.loadScheduledScript(
    "2004-06-26T08:14:57.000", -- 10 days after
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Saturn')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Zoom in after orbital insertion
  openspace.scriptScheduler.loadScheduledScript(
    "2004-11-01T00:00:00.000", -- 5 months after
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.FlightDestinationDistance', ]] .. tostring(primaryDistance) .. [[)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.VelocityZoomControl', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.ApplyLinearFlight', true)"
  )

  -- Focus on Saturn again
  openspace.scriptScheduler.loadScheduledScript(
    "2004-11-10T00:00:00.000", -- 10 days after
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Saturn')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Equinox start
  openspace.scriptScheduler.loadScheduledScript(
    "2008-08-09T00:00:00.000",
    "openspace.setPropertyValueSingle('ScreenSpace.Cassini-Mission-Part-Description.TexturePath', ']] .. textImagefolder .. '/text-cassini-dagjamningsuppdraget.png' .. [[')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.FlightDestinationDistance', ]] .. tostring(equinoxDistance) .. [[)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.VelocityZoomControl', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.ApplyLinearFlight', true)" ..
    "openspace.time.interpolateDeltaTime(864000)" .. -- 10 days per second
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Saturn')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Solstice start
  openspace.scriptScheduler.loadScheduledScript(
    "2010-11-24T00:00:00.000",
    "openspace.setPropertyValueSingle('ScreenSpace.Cassini-Mission-Part-Description.TexturePath', ']] .. textImagefolder .. '/text-cassini-solstandsuppdraget.png' .. [[')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.FlightDestinationDistance', ]] .. tostring(solsticeDistance) .. [[)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.VelocityZoomControl', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.ApplyLinearFlight', true)" ..
    "openspace.time.interpolateDeltaTime(1314871)" .. -- 15 days per second
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Saturn')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Focus on Saturn again
  openspace.scriptScheduler.loadScheduledScript(
    "2010-12-04T00:00:00.000", -- ~10 days after
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Saturn')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Grand Finale start
  openspace.scriptScheduler.loadScheduledScript(
    "2017-04-16T00:00:00.000", -- 10 day pre delay
    "openspace.setPropertyValueSingle('ScreenSpace.Cassini-Mission-Part-Description.TexturePath', ']] .. textImagefolder .. '/text-cassini-storafinalen.png' .. [[')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.FlightDestinationDistance', ]] .. tostring(grandFinaleDistance) .. [[)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.VelocityZoomControl', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.ApplyLinearFlight', true)" ..
    "openspace.time.interpolateDeltaTime(172800)" .. -- 2 Days  per second
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Saturn')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Focus on Saturn again
  openspace.scriptScheduler.loadScheduledScript(
    "2017-04-26T00:00:00.000", -- 10 days after
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Saturn')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Take a moment
  openspace.scriptScheduler.loadScheduledScript(
    "2017-09-15T10:34:05.000",
    "openspace.time.interpolateDeltaTime(1)"
  )

  -- End
  openspace.scriptScheduler.loadScheduledScript(
    "2017-09-16T10:34:20.000", -- 1 day delay 15 sec
    "openspace.setPropertyValueSingle('ScreenSpace.Cassini-Mission-Part-Description.Enabled', false)" ..
    "openspace.setPropertyValueSingle('ScreenSpace.Cassini-Time-Speed-Description.Enabled', false)" ..
    "openspace.time.setTime('2004-06-16T08:14:57.000')" .. -- Loop
    "openspace.navigation.setNavigationState(]] .. tostring(cassiniNavigationState) .. [[)"
  )
]]


local huygensDetach = "2004-11-21 08:44:53.000"
local huygensEnd = "2005-01-14 09:05:55.000"

local approachDistance = 1000000000
local landingDistance = 45000000

local huygensNavigationState = [[{ Anchor = 'Saturn', Pitch = -0.003934, Position = { 1343293062.949463, 3847226689.074280, -1700869686.287659 }, ReferenceFrame = 'Root', Up = { -0.697954, 0.479043, 0.532333 }, Yaw = 0.003055 }]]

local huygensScripts = [[
  -- Detach
  openspace.scriptScheduler.loadScheduledScript(
    "2004-11-21 08:44:54.000", -- 1 sec pre delay
    "openspace.time.interpolateDeltaTime(172800)" -- 2 days per second
  )

  -- Slow
  openspace.scriptScheduler.loadScheduledScript(
    "2004-12-21 08:44:53.000",
    "openspace.time.interpolateDeltaTime(86400)" .. -- 1 day per second
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Saturn')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Approach
  openspace.scriptScheduler.loadScheduledScript(
    "2005-01-13 00:00:00.000",
    "openspace.time.interpolateDeltaTime(3600)" .. -- 1 hour per second
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Titan')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.FlightDestinationDistance', ]] .. tostring(approachDistance) .. [[)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.VelocityZoomControl', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.ApplyLinearFlight', true)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Titan')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Landing
  openspace.scriptScheduler.loadScheduledScript(
    "2005-01-14 06:41:40.000", -- 30 min pre delay
    "openspace.time.interpolateDeltaTime(600)" .. -- 10 min per second
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.FlightDestinationDistance', ]] .. tostring(landingDistance) .. [[)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.VelocityZoomControl', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.LinearFlight.ApplyLinearFlight', true)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime', 2.0)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil)" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Titan')" ..
    "openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '')"
  )

  -- Take a moment
  openspace.scriptScheduler.loadScheduledScript(
    "2005-01-14 09:05:55.000",
    "openspace.time.interpolateDeltaTime(1)"
  )

  -- End
  openspace.scriptScheduler.loadScheduledScript(
    "2005-01-14 09:06:05.000", -- 10 sec delay
    "openspace.time.setTime('2004-11-21 08:44:50.000')" .. -- Loop
    "openspace.navigation.setNavigationState(]] .. tostring(huygensNavigationState) .. [[)"
  )
]]

----------------------------------------------------------------
-- STATES
----------------------------------------------------------------
local trails = { "primaryMission", "equinoxMission", "solsticeMission", "grandFinale" }

local cassiniState = {
  Identifier = "Cassini",
  Enter = [[
    ]] .. util.setOrbitSpeedFactor(0.4) .. [[
    ]] .. util.orbitConstantLatitudeOnArrival() .. [[
    openspace.setPropertyValue('{moonTrail_saturn_major}.Renderable.Opacity', 0.0, 3.0)
    openspace.setPropertyValue('{moon_saturn_major}.Renderable.Opacity', 0.0, 3.0)
    openspace.setPropertyValueSingle('Scene.TitanAtmosphere.Renderable.Enabled', false)
    ]] .. util.fadeInNodes(trails) .. [[
    ]] .. cassiniScripts .. [[
  ]],
  Exit = [[
    ]] .. util.stopOrbiting() .. [[
    openspace.scriptScheduler.clear()
    openspace.setPropertyValueSingle('ScreenSpace.Cassini-Mission-Part-Description.Enabled', false)
    openspace.setPropertyValueSingle('ScreenSpace.Cassini-Time-Speed-Description.Enabled', false)
    ]] .. util.fadeOutNodes(trails) .. [[
      openspace.setPropertyValueSingle('Scene.TitanAtmosphere.Renderable.Enabled', true)
    openspace.setPropertyValue('{moon_saturn_major}.Renderable.Opacity', 1.0, 3.0)
    openspace.setPropertyValue('{moonTrail_saturn_major}.Renderable.Opacity', 1.0, 3.0)
  ]]
}

local huygensState = {
  Identifier = "Huygens",
  Enter = [[
    openspace.setPropertyValue('{moon_saturn_major}.Renderable.Opacity', 0.0, 3.0)
    openspace.setPropertyValue('{moonTrail_saturn_major}.Renderable.Opacity', 0.0, 3.0)
    openspace.setPropertyValueSingle('Scene.Titan.Renderable.Opacity', 1.0, 3.0)
    ]] .. util.fadeInNodes({ "TitanTrail", "Titan" }) .. [[
    ]] .. util.fadeInNodes({ "huygensTrail" }) .. [[
    ]] .. huygensScripts .. [[
  ]],
  Exit = [[
    openspace.scriptScheduler.clear()
    ]] .. util.fadeOutNodes({ "huygensTrail" }) .. [[
    openspace.setPropertyValue('{moon_saturn_major}.Renderable.Opacity', 1.0, 3.0)
    openspace.setPropertyValue('{moonTrail_saturn_major}.Renderable.Opacity', 1.0, 3.0)
  ]]
}

local states = { cassiniState, huygensState }

----------------------------------------------------------------
-- TRANSITIONS within this substate
----------------------------------------------------------------
-- The action we want to happen when moving from any of the substates back
-- to the SolarSystem state
local goToHome = [[
  ]] .. util.disableRoll() .. [[
  ]] .. flyHome.cameraPath .. [[
]]

local goToCassiniOverview = [[
  ]] .. util.setCurveType("AvoidCollisionWithLookAt") .. [[
  ]] .. util.enableRoll() .. [[
  ]] .. util.flyToNavState(cassiniNavigationState) .. [[
]]

local goToHuygensOverview = [[
  ]] .. util.setCurveType("AvoidCollisionWithLookAt") .. [[
  ]] .. util.enableRoll() .. [[
  ]] .. util.flyToNavState(huygensNavigationState) .. [[
]]

local transitions = {
  -- Transition to/from this state
  {
    From = "Home",
    To = "Cassini",
    Action = goToCassiniOverview
  },
  {
    From = "Cassini",
    To = "Home",
    Action = goToHome
  },
  -- Cassini - Huygens
  {
    From = "Cassini",
    To = "Huygens",
    Action = goToHuygensOverview
  },
  {
    From = "Huygens",
    To = "Cassini",
    Action = goToCassiniOverview
  },
  -- Back to SolarSystem from substates
  {
    From = "Huygens",
    To = "Home",
    Action = goToHome
  }
}

asset.export("states", states)
asset.export("transitions", transitions)
