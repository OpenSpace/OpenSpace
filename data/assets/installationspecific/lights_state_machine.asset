local util = asset.require('./utility_functions')

local defaultTime = 654728475 -- 2020 Sep 9, 9:00

---------------------------------------------------------------- 
-- DEFAULT STATE - to reduce number of transitions
----------------------------------------------------------------
local defaultTargetDistance = 3E11

defaultState = {
    Identifier = "Default", 
    Enter = [[]],
    Exit = [[]]
}

---------------------------------------------------------------- 
-- 1. EARTH STATE
----------------------------------------------------------------
local earthTargetDistance = 1.5E7

local noWeatherLayer = "Scene.Earth.Renderable.Layers.ColorLayers.ESRI_World_Imagery"

earthState = {
    Identifier = "Earth",
    Enter = [[
        openspace.printInfo('Entering Earth State')
        ]] .. util.setOrbitSpeedFactor(0.4) .. [[
        ]] .. util.orbitOnArrival() .. [[
        openspace.setPropertyValueSingle(
            'ScreenSpace.text-earth.TexturePath',
            '${ASSETS}/installationspecific/images/text-earth.png'
        )
    ]],
    Exit = [[
        openspace.printInfo('Exiting Earth State')
        ]] .. util.stopOrbiting() .. [[
        openspace.setPropertyValueSingle(']] .. noWeatherLayer .. [[.Enabled', false);
    ]]
}

---------------------------------------------------------------- 
-- 2. GALAXY STATE
----------------------------------------------------------------
local galaxiesTargetDistance =  2.2E25; -- 0.7 Giga parsecs in meter

galaxiesState = {
    Identifier = "Galaxies", 
    Enter = [[
        openspace.printInfo('Entering Galaxies State')
        ]] .. util.setOrbitSpeedFactor(0.2) .. [[
        ]] .. util.orbitOnArrival() .. [[
        openspace.setPropertyValueSingle(
            'ScreenSpace.text-galaxies.TexturePath',
            '${ASSETS}/installationspecific/images/text-galaxies.png'
        )
    ]],
    Exit = [[
        openspace.printInfo('Exiting Galaxies State')
        ]] .. util.stopOrbiting() .. [[
    ]]
}

---------------------------------------------------------------- 
-- 3. ASTEROIDS STATE
----------------------------------------------------------------
local defaultShownAsteroids = [[{
    'sssb_sssb_data_apollo_asteroid',
    'sssb_sssb_data_aten_asteroid',
    'sssb_sssb_data_atira_asteroid'
}]]

local asteroidsTargetDistance = 1e12
local fadeInDuration = 10
local fadeOutDuration = 10
local labelFadeDuration = 4

local setPlanetLabelsOpacity = function(value) 
    return [[
        local list = openspace.getProperty('{solarsystem_labels}.Renderable.Opacity');
        for _,v in pairs(list) do 
            openspace.setPropertyValueSingle(v,
                ]] .. tostring(value) .. [[, 
                ]] .. tostring(labelFadeDuration) .. [[
            )
        end
    ]]
end

-- Set a specific property for the asteroid renderable
local setAsteroidsProperty = function(property, value, duration) 
    local interpolationDurationString = ""
    if(duration) then 
        interpolationDurationString = "," .. tostring(duration)
    end

    return [[
        local asteroids =]] .. defaultShownAsteroids .. [[
        for _, a in ipairs(asteroids) do
            openspace.setPropertyValueSingle(
                'Scene.' .. a .. '.Renderable.]] .. property .. [[',
                ]] ..  tostring(value) .. [[
                ]] .. interpolationDurationString .. [[
            )
        end
    ]]
end

asteroidsState = {
    Identifier = "Asteroids",
    Enter = [[
        openspace.printInfo('Entering Asteroids State')
        ]] .. setAsteroidsProperty('Opacity', 0.05) .. [[
        ]] .. setAsteroidsProperty('Enabled', true) .. [[
        ]] .. setAsteroidsProperty('Opacity', 1, fadeInDuration) .. [[ 
        ]] .. util.setOrbitSpeedFactor(0.2) .. [[
        ]] .. util.orbitOnArrival() .. [[
        ]] .. setPlanetLabelsOpacity(1.0) .. [[
    ]],
    Exit = [[
        openspace.printInfo('Exiting Asteroids State')
        ]] .. util.stopOrbiting() .. [[
        openspace.time.setPause(true)
        openspace.time.setDeltaTime(1)
        openspace.time.setTime(]] .. tostring(defaultTime) .. [[)
        ]] .. setPlanetLabelsOpacity(0.0) .. [[
    ]]
    -- Note: the asteroids are disabled on the server, since we cannot
    -- currently wait until they have faded out using Lua
}

---------------------------------------------------------------- 
-- 4. MARS
----------------------------------------------------------------
local marsTargetDistance = 7E6

local marsDetailedLayer = "Scene.Mars.Renderable.Layers.ColorLayers.Themis_IR_Day_Sweden"

marsState = {
    Identifier = "Mars",
    Enter = [[
        openspace.printInfo('Entering Mars State')
        ]] .. util.setOrbitSpeedFactor(0.4) .. [[
        ]] .. util.orbitOnArrival() .. [[
        -- Make sure that the high-detailed layer is not visible when we arrive
        openspace.setPropertyValueSingle(
            "]] .. marsDetailedLayer .. [[.Settings.Opacity", 0
        )
        openspace.setPropertyValueSingle(
            'ScreenSpace.text-mars.TexturePath',
            '${ASSETS}/installationspecific/images/text-mars.png'
        )
    ]],
    Exit = [[
        openspace.printInfo('Exiting Mars State')
        ]] .. util.stopOrbiting() .. [[
        -- Make sure that we look at mars when we leave it
        ]] .. util.changeAnchor('Mars', 3) .. [[
    ]]
}

---------------------------------------------------------------- 
-- 5. CONSTELLATIONS
----------------------------------------------------------------
local constellationsFadeInOutDuration = 4

local constellationsTargetDistance = 2E9

local fadeConstellationsToOpacity = function(targetValue) 
    return [[
        openspace.setPropertyValueSingle(
            "Scene.Constellations.Renderable.Opacity", 
            ]] .. tostring(targetValue) .. [[,
            ]] .. tostring(constellationsFadeInOutDuration) .. [[
        )
        openspace.setPropertyValue(
            "Scene.ConstellationArt*.Renderable.Opacity",
            ]] .. tostring(targetValue / 3.0) .. [[,
            ]] .. tostring(constellationsFadeInOutDuration) .. [[
        )
    ]]
end

local fadePlanetTrailsToOpacity = function(value)
    return [[
        openspace.setPropertyValue(
            "{planetTrail_solarSystem}.Renderable.Opacity",
            ]] .. tostring(value) .. [[,
            ]] .. tostring(constellationsFadeInOutDuration) .. [[
        );
    ]]
end

constellationsState = {
    Identifier = "Constellations",
    Enter = [[
        openspace.printInfo('Entering Constellations State')
        ]] .. util.setOrbitSpeedFactor(0.35) .. [[
        ]] .. util.orbitOnArrival() .. [[
        ]] .. fadePlanetTrailsToOpacity(0.0) .. [[
    ]],
    Exit = [[
        openspace.printInfo('Exiting Constellations State')
        ]] .. util.stopOrbiting() .. [[
        ]] .. fadeConstellationsToOpacity(0.0) .. [[
        ]] .. fadePlanetTrailsToOpacity(1.0) .. [[
        -- Make sure we are looking at earth when leaving
        ]] .. util.changeAnchor('Earth', 4) .. [[
    ]]
}

----------------------------------------------------------------
-- 6. Saturn
----------------------------------------------------------------
local saturnTargetDistance = 36E7

saturnState = {
    Identifier = "Saturn",
    Enter = [[
        openspace.printInfo('Entering Saturn State')
        ]] .. util.setOrbitSpeedFactor(0.4) .. [[
        ]] .. util.orbitOnArrival() .. [[
        openspace.setPropertyValueSingle(
            'ScreenSpace.text-saturn.TexturePath',
            '${ASSETS}/installationspecific/images/text-saturn.png'
        )
    ]],
    Exit = [[
        openspace.printInfo('Exiting Saturn State')
        ]] .. util.stopOrbiting() .. [[
        -- Make sure that we look at saturn when we leave it
        ]] .. util.changeAnchor('Saturn', 3) .. [[
    ]]
}

---------------------------------------------------------------- 
-- COMBINE STATES AND TRANSITIONS
----------------------------------------------------------------
states = { 
    defaultState,
    earthState,
    galaxiesState,
    asteroidsState,
    marsState,
    constellationsState,
    saturnState
}

transitions = {
    -- 1. Earth
    {
        From = "Earth",
        To = "Default",
        Action = util.applyLinearFlight(defaultTargetDistance, 1.5)
    },
    {
        From = "Default",
        To = "Earth",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goTo('Earth', true)
        ]]
    },
    -- Mars - Earth
    {
        From = "Earth",
        To = "Mars",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goTo('Mars')
        ]]
    },
    {
        From = "Mars",
        To = "Earth",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goTo('Earth', true)
        ]]
    },
    -- 2. Galaxies
    {
        From = "Galaxies",
        To = "Default",
        Action = util.applyLinearFlight(defaultTargetDistance, 1.5)
    },
    {
        From = "Default",
        To = "Galaxies",
        Action = util.applyLinearFlight(galaxiesTargetDistance, 1.5)
    },
    -- to Galaxies
    {
        From = "Earth",
        To = "Galaxies",
        Action = util.applyLinearFlight(galaxiesTargetDistance, 1.5)
    },
    {
        From = "Mars",
        To = "Galaxies",
        Action = util.applyLinearFlight(galaxiesTargetDistance, 1.5)
    },
    {
        From = "Asteroids",
        To = "Galaxies",
        Action = util.applyLinearFlight(galaxiesTargetDistance, 1.5)
    },
    {
        From = "Constellations",
        To = "Galaxies",
        Action = util.applyLinearFlight(galaxiesTargetDistance, 1.5)
    },
    {
        From = "Saturn",
        To = "Galaxies",
        Action = util.applyLinearFlight(galaxiesTargetDistance, 1.5)
    },
    -- from Galaxies
    {
        From = "Galaxies",
        To = "Earth",
        Action = [[
            ]] .. util.changeAnchor('Earth', 1) .. [[
            ]] .. util.applyLinearFlight(earthTargetDistance, 1.5) .. [[
        ]]
    },
    {
        From = "Galaxies",
        To = "Asteroids",
        Action = [[
            ]] .. util.changeAnchor('Sun', 1) .. [[
            ]] .. util.applyLinearFlight(asteroidsTargetDistance, 1.5) .. [[
        ]]
    },
    {
        From = "Galaxies",
        To = "Mars",
        Action = [[
            ]] .. util.changeAnchor('Mars', 1) .. [[
            ]] .. util.applyLinearFlight(marsTargetDistance, 1.5) .. [[
        ]]
    },
    {
        From = "Galaxies",
        To = "Constellations",
        Action = [[
            ]] .. util.changeAnchor('Earth', 1) .. [[
            ]] .. util.applyLinearFlight(constellationsTargetDistance, 1.5) .. [[
        ]]
    },
    {
        From = "Galaxies",
        To = "Saturn",
        Action = [[
            ]] .. util.changeAnchor('Saturn', 1) .. [[
            ]] .. util.applyLinearFlight(saturnTargetDistance, 1.5) .. [[
        ]]
    },
    -- 3. Asteroids
    {
        From = "Asteroids",
        To = "Default",
        Action = [[
            ]] .. util.applyLinearFlight(defaultTargetDistance, 1.5) .. [[
        ]]
    },
    {
        From = "Default",
        To = "Asteroids",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            ]] .. util.changeAnchor('Sun', 1) .. [[
            openspace.time.setPause(true)
            local targetDistance = ]] .. tostring(asteroidsTargetDistance) .. [[
            openspace.pathnavigation.goToHeight('Sun', targetDistance, true, 10)
        ]]
    },
    -- 4. Mars
    {
        From = "Mars",
        To = "Default",
        Action = util.applyLinearFlight(defaultTargetDistance, 1.0)
    },
    {
        From = "Default",
        To = "Mars",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goTo('Mars', true)
        ]]
    },
    -- 5. Constellations
    {
        From = "Constellations",
        To = "Default",
        Action = util.applyLinearFlight(defaultTargetDistance, 1.5)
    },
    {
        From = "Default",
        To = "Constellations",
        Action = [[
            ]] .. util.changeAnchor('Earth', 2) .. [[
            ]] .. util.applyLinearFlight(constellationsTargetDistance, 1) .. [[
        ]]
    },
    {
        From = "Earth",
        To = "Constellations",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goToHeight(
                'Earth',
                ]] .. tostring(constellationsTargetDistance) .. [[,
                true
            )
        ]]
    },
    {
        From = "Constellations",
        To = "Earth",
        Action = [[
            ]] .. util.changeAnchor('Earth', 3) .. [[
            ]] .. util.applyLinearFlight(earthTargetDistance, 2) .. [[
        ]]
    },
    -- 6. Saturn
    {
        From = "Saturn",
        To = "Default",
        Action = util.applyLinearFlight(defaultTargetDistance, 1.0)
    },
    {
        From = "Default",
        To = "Saturn",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goToHeight(
                'Saturn',
                ]] .. tostring(saturnTargetDistance) .. [[,
                true
            )
        ]]
    },
    -- Saturn - Earth
    {
        From = "Earth",
        To = "Saturn",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goToHeight(
                'Saturn',
                ]] .. tostring(saturnTargetDistance) .. [[,
                true
            )
        ]]
    },
    {
        From = "Saturn",
        To = "Earth",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goTo('Earth', true)
        ]]
    },
    -- Saturn - Mars
    {
        From = "Mars",
        To = "Saturn",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goToHeight(
                'Saturn',
                ]] .. tostring(saturnTargetDistance) .. [[,
                true
            )
        ]]
    },
    {
        From = "Saturn",
        To = "Mars",
        Action = [[
            ]] .. util.disableLinearFlight() .. [[
            ]] .. util.setCurveTypeToZoomOverview() .. [[
            openspace.time.setPause(true)
            openspace.pathnavigation.goTo('Mars', true)
        ]]
    }
}

asset.onInitialize(function()
    openspace.statemachine.createStateMachine(states, transitions)

    -- OBS: the following line should be set in the profile
    openspace.statemachine.setInitialState("Earth")
    openspace.time.setPause(true) -- However, this does not work
end)
