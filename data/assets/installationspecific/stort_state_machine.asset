local util = asset.require('./utility_functions')
local flyHome = asset.require('./fly_home_alternatives')
local defaultTime = asset.require('./default_time').time

----------------------------------------------------------------
-- STATES
----------------------------------------------------------------
local startState = {
  Identifier = "Start",
}

local homeState = {
  Identifier = "Home",
  Enter = [[
    ]] .. util.setOrbitSpeedFactor(0.4) .. [[
    ]] .. util.startOrbiting() .. [[
    ]] .. util.orbitAroundUpOnArrival() .. [[
    ]] .. util.enableRoll() .. [[
    openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.LimitZoom.EnableMaximumAllowedDistance", false)
    openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.DisableZoom", true);
    openspace.setPropertyValueSingle('Modules.Touch.TouchInteraction.DisableZoom', true);
  ]],
  Exit = [[
      ]] .. util.stopOrbiting() .. [[
      ]] .. util.disableRoll() .. [[
        openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.DisableZoom", false);
      openspace.setPropertyValueSingle('Modules.Touch.TouchInteraction.DisableZoom', false);
    ]]
}

-- An empty state that wil just be used to show a page in the GUI where the
-- user can fly to the planets in the solar system
local solarSystemState = {
  Identifier = "SolarSystem",
  Enter = [[
    ]] .. util.setOrbitSpeedFactor(0.4) .. [[
    ]] .. util.startOrbiting() .. [[
    ]] .. util.orbitAroundUpOnArrival() .. [[
    openspace.setPropertyValueSingle("Scene.Jupiter.Renderable.Layers.ColorLayers.JupiterVideo.TileProvider.VideoPlayer.Reload", nil)
    openspace.setPropertyValueSingle("Scene.Jupiter.Renderable.Layers.ColorLayers.JupiterVideo.TileProvider.VideoPlayer.Play", nil)
  ]],
  Exit = [[
    openspace.setPropertyValue('{moonTrail_minor}.Renderable.Enabled', false);
    openspace.setPropertyValueSingle("Scene.Jupiter.Renderable.Layers.ColorLayers.JupiterVideo.TileProvider.VideoPlayer.Pause", nil)
    ]] .. util.stopOrbiting() .. [[
  ]]
}

-- Missions
local substateApollo = asset.require('./substates/missions/apollo')
local substateMarsRovers = asset.require('./substates/missions/mars_rovers')
local substateCassini = asset.require('./substates/missions/cassini')
local substateVoyagerPioneer = asset.require('./substates/missions/voyager_pioneer')

-- Others
local substateCBR = asset.require('./substates/cbr')
local substateExoplanets = asset.require('./substates/exoplanets')

local states = {
  startState,
  homeState,
  solarSystemState
}

util.appendTable(states, substateApollo.states)
util.appendTable(states, substateMarsRovers.states)
util.appendTable(states, substateCassini.states)
util.appendTable(states, substateVoyagerPioneer.states)
util.appendTable(states, substateCBR.states)
util.appendTable(states, substateExoplanets.states)

----------------------------------------------------------------
-- TRANSITIONS
----------------------------------------------------------------

-- Ugly workaround: we set the time here since setting the correct time at start-up and also
-- pausing causes weirdnesss and leads to some things (such as the ISS rotation) to not update
-- correctly. Clear scheduler after this has happened, to avoid it happening again by accident.
local startupScript = string.gsub([[
    openspace.time.setPause(true);
    openspace.time.setTime(']] .. defaultTime .. [[');
    ]] .. flyHome.cameraPath .. [[;
    openspace.scriptScheduler.clear();
  ]],
  "\n", ""
)

local transitions = {
  {
    From = "Start",
    To = "Home",
    Action = [[openspace.scriptScheduler.loadScheduledScript(']] .. defaultTime .. [[', "]] .. startupScript .. [[");]]
  },
  -- SolarSystem <-> Home
  {
    From = "SolarSystem",
    To = "Home",
    Action = [[
      local anchor = openspace.propertyValue("NavigationHandler.OrbitalNavigator.Anchor")
      if (anchor ~= 'Sun-Handle' ) then ]]
        .. flyHome.cameraPath ..
      [[end
    ]]
  },
  {
    From = "Home",
    To = "SolarSystem"
  },
  -- The rest are in the substates
}

util.appendTable(transitions, substateApollo.transitions)
util.appendTable(transitions, substateMarsRovers.transitions)
util.appendTable(transitions, substateCassini.transitions)
util.appendTable(transitions, substateVoyagerPioneer.transitions)
util.appendTable(transitions, substateCBR.transitions)
util.appendTable(transitions, substateExoplanets.transitions)

asset.onInitialize(function()
    openspace.statemachine.createStateMachine(states, transitions, "Start")
    openspace.statemachine.goToState("Home")
end)
