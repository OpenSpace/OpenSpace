----------------------------------------------------------------
-- GENERAL USEFUL THINGS
----------------------------------------------------------------

-- Use to orbit after a camera path
local orbitOnArrival = function()
  return [[
    openspace.setPropertyValueSingle(
      'NavigationHandler.OrbitalNavigator.IdleBehavior.IdleBehavior',
      0 -- Orbit
    )
    openspace.setPropertyValueSingle(
      "NavigationHandler.PathNavigator.ApplyIdleBehaviorOnFinish",
      true
    )
  ]]
end

-- Use to orbit at constant latitude after a camera path
local orbitConstantLatitudeOnArrival = function()
  return [[
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.IdleBehavior.IdleBehavior",
      1 -- OrbitAtConstantLatitude
    )
    openspace.setPropertyValueSingle(
      "NavigationHandler.PathNavigator.ApplyIdleBehaviorOnFinish",
      true
    )
  ]]
end

-- Use to orbit around up vectore after a camera path
local orbitAroundUpOnArrival = function()
  return [[
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.IdleBehavior.IdleBehavior",
      2 -- OrbitAroundUp
    )
    openspace.setPropertyValueSingle(
      "NavigationHandler.PathNavigator.ApplyIdleBehaviorOnFinish",
      true
    )
  ]]
end

-- Use to immediately trigger an orbiting idle behavior
local startOrbiting = function()
  return [[
    openspace.setPropertyValueSingle(
      'NavigationHandler.OrbitalNavigator.IdleBehavior.IdleBehavior',
      0 -- Orbit
    )
    openspace.setPropertyValueSingle(
      'NavigationHandler.OrbitalNavigator.IdleBehavior.ApplyIdleBehavior',
      true
    )
  ]]
end

local stopOrbiting = function()
  return [[
    openspace.setPropertyValueSingle(
      'NavigationHandler.OrbitalNavigator.IdleBehavior.ApplyIdleBehavior',
      false
    )
    openspace.setPropertyValueSingle(
      'NavigationHandler.PathNavigator.ApplyIdleBehaviorOnFinish',
      false
    )
  ]]
end

local setOrbitSpeedFactor = function(value)
  return [[
    openspace.setPropertyValueSingle(
      'NavigationHandler.OrbitalNavigator.IdleBehavior.SpeedFactor',
      ]] .. tostring(value) .. [[
    )
  ]]
end

-- Change or retarget anchor
local changeAnchor = function(name, interpolationTime)
  return [[
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime",
      ]] .. tostring(interpolationTime) .. [[
    )
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.RetargetAnchor",
      nil
    )
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.Anchor",
      "]] .. name .. [["
    )
    openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.Aim", '')
  ]]
end

local enableRoll = function()
  return [[
    openspace.setPropertyValueSingle('NavigationHandler.PathNavigator.IncludeRoll', true)
  ]]
end

local disableRoll = function()
  return [[
    openspace.setPropertyValueSingle('NavigationHandler.PathNavigator.IncludeRoll', false)
  ]]
end

local flyToNavState = function(state)
  return [[
    openspace.navigation.flyToNavigationState(]] .. state .. [[)
  ]]
end

local flyLinearlyToHeight = function(height)
  return [[
    openspace.navigation.zoomToDistance(]] .. tostring(height) .. [[)
  ]]
end

local flyLinearlyToNode = function(node, distance)
  return [[
    openspace.pathnavigation.createPath({
      TargetType = 'Node',
      Target = ']] .. node ..[[',
      Height = ]] .. tostring(distance or nil) .. [[,
      PathType = "Linear"
    })
  ]]
end

local setCurveType = function(type)
  local typeAsInt = 0
  if (type == "ZoomOutOverview") then
    typeAsInt = 1
  elseif (type == "AvoidCollision") then
    typeAsInt = 0
  elseif (type == "AvoidCollisionWithLookAt") then
    typeAsInt = 3
  elseif (type == "Linear") then
    typeAsInt = 2
  end

  return [[
    openspace.setPropertyValueSingle('NavigationHandler.PathNavigator.DefaultPathType',
    ]] .. tostring(typeAsInt) .. [[)
  ]]
end

-- Note that this uses the string representation of time
local setTime = function(time)
  return "openspace.time.setTime('" .. time .. "')"
end

-- Note that this uses the string representation of time
local interpolateTime = function(time, duration)
  duration = duration or 4.0 -- 4 seconds is default
  return "openspace.time.interpolateTime('" .. time .. "', " .. tostring(duration) .. ")"
end

local interpolateProperty = function(uri, value, duration)
  duration = duration or 1.0
  return [[
    openspace.setPropertyValueSingle(
      ']] .. uri .. [[',
      ]] .. tostring(value) .. [[,
      ]] .. tostring(duration) .. [[
    )
  ]]
end

local fadeInNodes = function(identifiers)
  local str = ""
  for key, identifier in ipairs(identifiers) do
    str = str .. [[
      openspace.setPropertyValueSingle(
        'Scene.]] .. identifier .. [[.Renderable.Enabled', true
      );
      openspace.setPropertyValueSingle(
        'Scene.]] .. identifier .. [[.Renderable.Fade', 1.0, 3.0
      );
    ]]
  end
  return str
end

local fadeOutNodes = function(identifiers)
  local str = ""
  for key,identifier in ipairs(identifiers) do
    str = str .. [[
      openspace.setPropertyValueSingle(
        "Scene.]] .. identifier .. [[.Renderable.Fade", 0.0, 3.0
      );
    ]]
  end
  return str
end

-- Append table B to table A
local appendTable = function(A, B)
  for key, val in pairs(B) do
    table.insert( A, val )
  end
end

local removeLineBreaks = function(stringValue)
  -- replace newline with empty string
  return string.gsub(stringValue, "\n", "")
end

asset.export("orbitOnArrival", orbitOnArrival)
asset.export("orbitConstantLatitudeOnArrival", orbitConstantLatitudeOnArrival)
asset.export("orbitAroundUpOnArrival", orbitAroundUpOnArrival)
asset.export("startOrbiting", startOrbiting)
asset.export("stopOrbiting", stopOrbiting)
asset.export("setOrbitSpeedFactor", setOrbitSpeedFactor)
asset.export("changeAnchor", changeAnchor)
asset.export("enableRoll", enableRoll)
asset.export("disableRoll", disableRoll)
asset.export("flyToNavState", flyToNavState)
asset.export("flyLinearlyToHeight", flyLinearlyToHeight)
asset.export("flyLinearlyToNode", flyLinearlyToNode)
asset.export("setCurveType", setCurveType)
asset.export("setTime", setTime)
asset.export("interpolateTime", interpolateTime)
asset.export("interpolateProperty", interpolateProperty)
asset.export("fadeInNodes", fadeInNodes)
asset.export("fadeOutNodes", fadeOutNodes)
asset.export("appendTable", appendTable)
asset.export("removeLineBreaks", removeLineBreaks)