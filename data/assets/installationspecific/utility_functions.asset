---------------------------------------------------------------- 
-- GENERAL USEFUL THINGS
----------------------------------------------------------------
local orbitOnArrival = function()
  return [[
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.IdleBehavior.IdleBehavior",
      0 -- Orbit
    )
    openspace.setPropertyValueSingle(
      "NavigationHandler.PathNavigator.ApplyIdleBehaviorOnFinish",
      true
    )
  ]]
end

local orbitConstantLatitudeOnArrival = function()
  return [[
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.IdleBehavior.IdleBehavior",
      1 -- OrbitAtConstantLatitude
    )
    openspace.setPropertyValueSingle(
      "NavigationHandler.PathNavigator.ApplyIdleBehaviorOnFinish",
      true
    )
  ]]
end

local stopOrbiting = function()
  return [[
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.IdleBehavior.ApplyIdleBehavior",
      false
    )
    openspace.setPropertyValueSingle(
      "NavigationHandler.PathNavigator.ApplyIdleBehaviorOnFinish",
      false
    )
  ]]
end

local setOrbitSpeedFactor = function(value)
  return [[
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.IdleBehavior.SpeedFactor",
      ]] .. tostring(value) .. [[
    )    
  ]]
end

local changeAnchor = function(name, interpolationTime) 
  return [[
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.RetargetAnchorInterpolationTime",
      ]] .. tostring(interpolationTime) .. [[
    ) 
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.RetargetAnchor", 
      nil
    )
    openspace.setPropertyValueSingle(
      "NavigationHandler.OrbitalNavigator.Anchor", 
      "]] .. name .. [["
    )
    openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.Aim", '')
  ]]
end

local applyLinearFlight = function(height, zoomSpeedFactor)
  if (zoomSpeedFactor == nil) then
    zoomSpeedFactor = 3.5 -- the default value
  end
  return [[
    openspace.setPropertyValueSingle(
      'NavigationHandler.OrbitalNavigator.LinearFlight.FlightDestinationDistance',
      ]] .. tostring(height) .. [[
    )
    openspace.setPropertyValueSingle(
      'NavigationHandler.OrbitalNavigator.LinearFlight.VelocityZoomControl',
      ]] .. tostring(zoomSpeedFactor) .. [[
    )
    openspace.setPropertyValueSingle(
      'NavigationHandler.OrbitalNavigator.LinearFlight.ApplyLinearFlight',
      true
    )
  ]]
end

local disableLinearFlight = function() 
  return [[
    openspace.setPropertyValueSingle(
      'NavigationHandler.OrbitalNavigator.LinearFlight.ApplyLinearFlight',
      false
    )
  ]]
end

local enableRoll = function()
  return [[
    openspace.setPropertyValueSingle("NavigationHandler.PathNavigator.IncludeRoll", true)
  ]]
end

local disableRoll = function()
  return [[
    openspace.setPropertyValueSingle("NavigationHandler.PathNavigator.IncludeRoll", false)
  ]]
end

local flyToNavState = function(state)
  return [[ 
    openspace.time.setPause(true)
    openspace.pathnavigation.generatePath({
      TargetType = "NavigationState", NavigationState = ]] .. state .. [[
    })
  ]]
end

local setCurveType = function(type)
  local typeAsInt = 0
  if (type == "ZoomOutOverview") then
    typeAsInt = 2
  elseif (type == "AvoidCollision") then
    typeAsInt = 0
  elseif (type == "AvoidCollisionWithLookAt") then
    typeAsInt = 3
  end

  return [[
    openspace.setPropertyValueSingle("NavigationHandler.PathNavigator.DefaultPathType", 
    ]] .. tostring(typeAsInt) .. [[)
  ]]
end

-- Note that this uses the string representation of time
local setTime = function(time)
  return "openspace.time.setTime('" .. time .. "')"
end

-- Note that this uses the string representation of time
local interpolateTime = function(time, duration)
  duration = duration or 4.0 -- 4 seconds is default
  return "openspace.time.interpolateTime('" .. time .. "', " .. tostring(duration) .. ")"
end

-- Append table B to table A
local appendTable = function(A, B)
  for key, val in pairs(B) do
    table.insert( A, val )
  end
end

asset.export("orbitOnArrival", orbitOnArrival)
asset.export("orbitConstantLatitudeOnArrival", orbitConstantLatitudeOnArrival)
asset.export("stopOrbiting", stopOrbiting)
asset.export("setOrbitSpeedFactor", setOrbitSpeedFactor)
asset.export("changeAnchor", changeAnchor)
asset.export("applyLinearFlight", applyLinearFlight)
asset.export("disableLinearFlight", disableLinearFlight)
asset.export("enableRoll", enableRoll)
asset.export("disableRoll", disableRoll)
asset.export("flyToNavState", flyToNavState)
asset.export("setCurveType", setCurveType)
asset.export("setTime", setTime)
asset.export("interpolateTime", interpolateTime)
asset.export("appendTable", appendTable)
