local earthAsset = asset.require('scene/solarsystem/planets/earth/earth')

local textures = asset.syncedResource({
  Name = "Cardinal Direction Textures",
  Type = "UrlSynchronization",
  Identifier = "cardinal_direction_textures",
  Url = {
    "https://wms.openspace.amnh.org/static/sync/url/directions/sphere.png",
    "https://wms.openspace.amnh.org/static/sync/url/directions/sphere2.png",
    "https://wms.openspace.amnh.org/static/sync/url/directions/sphere3.png",
    "https://wms.openspace.amnh.org/static/sync/url/directions/sphere4.png",
    "https://wms.openspace.amnh.org/static/sync/url/directions/sphere5.png"
  },
  Override = false
})

local Position = {
  Identifier = "CardinalDirectionsPosition",
  Parent = earthAsset.Earth.Identifier,
  Transform = {
    Translation = {
      Type = "GlobeTranslation",
      Globe = earthAsset.Earth.Identifier,
      Latitude = 0.0,
      Longitude = 0.0,
      Altitude = 0.0,
      UseCamera = true
    },
    Rotation = {
      Type = "GlobeRotation",
      Globe = earthAsset.Earth.Identifier,
      Latitude = 0.0,
      Longitude = 0.0,
      UseCamera = true,
      Angle = 270.0
    }
  },
  GUI = {
    Name = "Cardinal Directions Position",
    Path = "/Other/Night Sky",
    Hidden = true
  }
}

local sphere = {
  Identifier = "CardinalDirectionSphere",
  Parent = Position.Identifier,
  Transform = {
    Rotation = {
      Type = "StaticRotation",
      Rotation = { -math.pi/2, 0.0, 0.0 }
    },
  },
  Renderable = {
    Type = "RenderableSphere",
    Enabled = asset.enabled,
    Size = 50000,
    Segments = 80,
    Opacity = 0.9,
    Texture = textures .. 'sphere.png',
    Orientation = "Inside",
    MirrorTexture = true,
    RenderBinMode = "PostDeferredTransparent"
  },
  GUI = {
    Name = "Cardinal Directions",
    Path = "/Other/Night Sky"
  }
}

local showCommand = [[
  local lat, lon, alt = openspace.globebrowsing.getGeoPositionForCamera();
  local camera = openspace.navigation.getNavigationState();
  openspace.setParent('CardinalDirectionsPosition', camera.Anchor)
  openspace.setPropertyValueSingle('Scene.CardinalDirectionsPosition.Translation.Globe', camera.Anchor);
  openspace.setPropertyValueSingle('Scene.CardinalDirectionsPosition.Translation.Latitude', lat);
  openspace.setPropertyValueSingle('Scene.CardinalDirectionsPosition.Translation.Longitude', lon);
  openspace.setPropertyValueSingle('Scene.CardinalDirectionsPosition.Rotation.Globe', camera.Anchor);
  openspace.setPropertyValueSingle('Scene.CardinalDirectionsPosition.Rotation.Latitude', lat);
  openspace.setPropertyValueSingle('Scene.CardinalDirectionsPosition.Rotation.Longitude', lon);
  openspace.setPropertyValueSingle('Scene.CardinalDirectionSphere.Renderable.Enabled', true);
  openspace.setPropertyValueSingle('Scene.CardinalDirectionSphere.Renderable.Fade', 0.0);
  openspace.setPropertyValueSingle('Scene.CardinalDirectionSphere.Renderable.Fade', 1.0, 1.0);
]]

local showBandAction = {
Identifier = "os.nightsky.show_nesw_band",
  Name = "Show cardinal directions (with ticks)",
  Command = "openspace.setPropertyValueSingle('Scene.CardinalDirectionSphere.Renderable.Texture','"
  .. textures:gsub("\\","/") .. "sphere5.png')"
  .. showCommand,
  Documentation = "Shows the cardinal direction sphere with letters and circle with tick marks",
  GuiPath = "/Night Sky/Directions",
  IsLocal = false
}

local showLettersAction = {
  Identifier = "os.nightsky.show_nesw_letters",
  Name = "Show cardinal directions (letters only)",
  Command = "openspace.setPropertyValueSingle('Scene.CardinalDirectionSphere.Renderable.Texture','"
  .. textures:gsub("\\","/") .. "sphere.png')"
  .. showCommand,
  Documentation = "Shows the cardinal direction sphere with letters only",
  GuiPath = "/Night Sky/Directions",
  IsLocal = false
}

local hideAction = {
  Identifier = "os.nightsky.hide_nesw",
  Name = "Hide cardinal directions",
  Command = [[
    openspace.setPropertyValueSingle('Scene.CardinalDirectionSphere.Renderable.Fade', 0.0, 1.0);
  ]],
  Documentation = "Hides the cardinal directions",
  GuiPath = "/Night Sky/Directions",
  IsLocal = false
}

asset.onInitialize(function()
  openspace.addSceneGraphNode(Position)
  openspace.addSceneGraphNode(sphere)
  openspace.action.registerAction(hideAction)
  openspace.action.registerAction(showBandAction)
  openspace.action.registerAction(showLettersAction)
end)

asset.onDeinitialize(function()
  openspace.action.removeAction(showLettersAction)
  openspace.action.removeAction(showBandAction)
  openspace.action.removeAction(hideAction)
  openspace.removeSceneGraphNode(sphere)
  openspace.removeSceneGraphNode(Position)
end)

asset.export(showBandAction)
asset.export(showLettersAction)
asset.export(hideAction)
asset.export(sphere)
asset.export(Position)
