local earthAsset = asset.require("scene/solarsystem/planets/earth/earth")



local textures = asset.syncedResource({
  Name = "Ground Panorama Textures",
  Type = "UrlSynchronization",
  Identifier = "ground_panorama_textures",
  Url = {
    "https://wms.openspace.amnh.org/static/sync/url/panos/0.png",
    "https://wms.openspace.amnh.org/static/sync/url/panos/1.png",
    "https://wms.openspace.amnh.org/static/sync/url/panos/2.png",
    "https://wms.openspace.amnh.org/static/sync/url/panos/3.png",
    "https://wms.openspace.amnh.org/static/sync/url/panos/4.png",
    "https://wms.openspace.amnh.org/static/sync/url/panos/5.png",
    "https://wms.openspace.amnh.org/static/sync/url/panos/6.png"
  },
  Override = false
})


local GroundPanoPosition = {
  Identifier = "GroundPanoPosition",
  Parent = earthAsset.Earth.Identifier,
  Transform = {
    Translation = {
      Type = "GlobeTranslation",
      Globe = earthAsset.Earth.Identifier,
      Latitude = 34.201639,
      Longitude = -118.171319,
      Altitude = 10.0,
      UseCamera = false,
      UseCameraAltitude = false
    },
    Rotation = {
      Type = "GlobeRotation",
      Globe = earthAsset.Earth.Identifier,
      Latitude = 34.201639,
      Longitude = -118.171319,
      UseHeightmap = false,
      Angle = 270.0
    }
  },
  GUI = {
    Name = "Ground Pano Position",
    Path = "/Other/Night Sky",
    Hidden = true
  }
}

local GroundPanoSphere = {
  Identifier = "GroundPanoSphere",
  Parent = GroundPanoPosition.Identifier,
  Transform = {
    Rotation = {
      Type = "StaticRotation",
      Rotation = { -math.pi / 2, 0.0, 0.0 }
    }
  },
  Renderable = {
    Type = "RenderableSphere",
    Size = 8.5,
    Segments = 40,
    Opacity = 1.0,
    Enabled = asset.enabled,
    Texture = textures .. "3.png",
    Orientation = "Inside",
    MirrorTexture = true,
    FadeOutThreshold = 1.00,
    Background = true,
    RenderBinMode = "Overlay"
  },
  GUI = {
    Name = "Ground Panorama",
    Path = "/Other/Night Sky"
  }
}

local showCommand = [[
  local lat, lon, alt = openspace.globebrowsing.getGeoPositionForCamera()
  local camera = openspace.navigation.getNavigationState()
  openspace.setParent("GroundPanoPosition", camera.Anchor)
  openspace.setPropertyValueSingle("Scene.GroundPanoPosition.Translation.Globe", camera.Anchor)
  openspace.setPropertyValueSingle("Scene.GroundPanoPosition.Translation.Latitude", lat)
  openspace.setPropertyValueSingle("Scene.GroundPanoPosition.Translation.Longitude", lon)
  openspace.setPropertyValueSingle("Scene.GroundPanoPosition.Translation.Altitude", alt)
  openspace.setPropertyValueSingle("Scene.GroundPanoPosition.Rotation.Globe", camera.Anchor)
  openspace.setPropertyValueSingle("Scene.GroundPanoPosition.Rotation.Latitude", lat)
  openspace.setPropertyValueSingle("Scene.GroundPanoPosition.Rotation.Longitude", lon)
  openspace.setPropertyValueSingle("Scene.GroundPanoSphere.Renderable.Enabled", true)
  openspace.setPropertyValueSingle("Scene.GroundPanoSphere.Renderable.Fade", 0.0)
  openspace.setPropertyValueSingle("Scene.GroundPanoSphere.Renderable.Fade", 1.0, 1.0)
]]

local setTextureCommand = function(scene)
  local command = [[openspace.setPropertyValueSingle("Scene.GroundPanoSphere.Renderable.Texture", "]]
  command = command .. textures
  if (scene == "forest") then
    command = command .. "1"
  elseif (scene == "city") then
    command = command .. "2"
  elseif (scene == "backyard") then
    command = command .. "3"
  elseif (scene == "desert") then
    command = command .. "4"
  else
    openspace.printDebug("unknown scene")
  end
  command = command .. [[.png")]]
  command = command:gsub("\\", "\\\\")
  return command
end

local ShowForestPano = {
  Identifier = "os.nightsky.ShowForestPano",
  Name = "Show forest panorama",
  Command = setTextureCommand("forest") .. showCommand,
  Documentation = "Shows the panorama sphere with a forest scene",
  GuiPath = "/Night Sky/Panoramas",
  IsLocal = false
}

local ShowCityPano = {
  Identifier = "os.nightsky.ShowCityPano",
  Name = "Show city panorama",
  Command = setTextureCommand("city") .. showCommand,
  Documentation = "Shows the panorama sphere with a city scene",
  GuiPath = "/Night Sky/Panoramas",
  IsLocal = false
}

local ShowBackyardPano = {
  Identifier = "os.nightsky.ShowBackyardPano",
  Name = "Show backyard panorama",
  Command = setTextureCommand("backyard") .. showCommand,
  Documentation = "Shows the panorama sphere with a backyard scene",
  GuiPath = "/Night Sky/Panoramas",
  IsLocal = false
}

local ShowDesertPano = {
  Identifier = "os.nightsky.ShowDesertPano",
  Name = "Show desert panorama",
  Command = setTextureCommand("desert") .. showCommand,
  Documentation = "Shows the panorama sphere with a desert scene",
  GuiPath = "/Night Sky/Panoramas",
  IsLocal = false
}

local HideGroundPano = {
  Identifier = "os.nightsky.HideGroundPano",
  Name = "Hide ground panorama",
  Command = [[
    openspace.fadeOut("Scene.GroundPanoSphere.Renderable")
  ]],
  Documentation = "Hides the panorama",
  GuiPath = "/Night Sky/Panoramas",
  IsLocal = false
}


asset.onInitialize(function()
  openspace.addSceneGraphNode(GroundPanoPosition)
  openspace.addSceneGraphNode(GroundPanoSphere)
  openspace.action.registerAction(ShowForestPano)
  openspace.action.registerAction(ShowCityPano)
  openspace.action.registerAction(ShowBackyardPano)
  openspace.action.registerAction(ShowDesertPano)
  openspace.action.registerAction(HideGroundPano)
end)

asset.onDeinitialize(function()
  openspace.action.removeAction(HideGroundPano)
  openspace.action.removeAction(ShowForestPano)
  openspace.action.removeAction(ShowCityPano)
  openspace.action.removeAction(ShowBackyardPano)
  openspace.action.removeAction(ShowDesertPano)
  openspace.removeSceneGraphNode(GroundPanoSphere)
  openspace.removeSceneGraphNode(GroundPanoPosition)
end)

asset.export(GroundPanoPosition)
asset.export(GroundPanoSphere)
asset.export("ShowForestPano", ShowForestPano.Identifier)
asset.export("ShowCityPano", ShowCityPano.Identifier)
asset.export("ShowBackyardPano", ShowBackyardPano.Identifier)
asset.export("ShowDesertPano", ShowDesertPano.Identifier)
asset.export("HideGroundPano", HideGroundPano.Identifier)
