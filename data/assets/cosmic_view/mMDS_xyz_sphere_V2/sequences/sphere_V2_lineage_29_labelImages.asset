local images = asset.localResource("Images/")
local constellationsCSV = asset.localResource("birdimages.csv")
local constellations_helper = asset.require("util/constellations_helper")

--Change names to be specific for mine (genConstellations)

--Csv files of position

--Change the parser. Mimic appearance of "constellation_data.csv"

-- copy label data into csv, same columns. and change columns in function below. Change matchstring and line below it

-- delete from matchstring how many columns. Delete line below with headers

-- x , y , z , text , name , hash , number, ImageName

-- 6 parantheses

-- remove code associated with every unused header




--function that reads the file
local function createConstellations(baseIdentifier, guiPath, constellationfile)
  local genConstellations = {}
  --skip the first line
  local notFirstLine = false
  -- define parsec to meters
  local PARSEC_CONSTANT = 3.0856776E16
  -- how many parsecs away do you want the images to be?
  -- this setting puts the billboards at the location of the constellation bounds grid from DU.
  -- but they can really be anywhere since the billboard size will scale with distance.
  local distanceMultiplier = 3.2
  local baseScale = 5e16
  for line in io.lines(openspace.absPath(constellationfile)) do
    if (notFirstLine) then
      -- describes the data
      local matchstring = "(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-)$"
      local x, y, z, text, name, hash, number, imageName, rotX, rotY, rotZ, scale, colorR, colorG, colorB = line:match(matchstring)
      local magVec = math.sqrt(x*x + y*y + z*z)
      local normx = x / magVec
      local normy = y / magVec
      local normz = z / magVec

      -- Use the full name in the data constellations.dat if possible
      -- Otherwise, use the given name in the constellation_data.csv file
      --local foundName = constellations_helper.findFullName(abbreviation)
      --if foundName ~= nil then
      --  name = foundName
      --end

      --group = (group == "" and globe or group)

      local aconstellation = {
        -- Identifier = guiPath .. "-" .. name,
        Identifier = "Kulturnatten_" .. name,
        Transform = {
          Translation = {
            Type = "StaticTranslation",
            -- position is in parsecs from the SolarSystemBarycenter, so convert to meters
            Position = {
              normx * PARSEC_CONSTANT * distanceMultiplier,
              normy * PARSEC_CONSTANT * distanceMultiplier,
              normz * PARSEC_CONSTANT * distanceMultiplier
            }
          },
          Rotation = {
            Type = "StaticRotation",
            Rotation = { tonumber(rotX), tonumber(rotY), tonumber(rotZ) }
          }
        },
        Renderable = {
          Type = "RenderablePlaneImageLocal",
          Size = tonumber(baseScale * scale * distanceMultiplier / 10),
          Enabled = false,
          Origin = "Center",
          --MultiplyColor = {colorR,colorG,colorB},
		  MultiplyColor = {tonumber(colorR),tonumber(colorG),tonumber(colorB)},
          Billboard = false, --might want true, for dome
          LazyLoading = false, --false, set to false to load in start, could for constellations also
          Texture = images .. imageName,
          BlendMode = "Additive",
          Opacity = 0.2,
          DimInAtmosphere = true
        },
        Tag = {"lineage_29_label"},
        GUI = {
          Name = name .. " Image",
          Path = "/Kulturnatten",
          Description = name .. " Image"
        }
      }
      table.insert(genConstellations, aconstellation)

    else
      notFirstLine = true
    end
  end
  return genConstellations
end






local nodes = {}


asset.onInitialize(function()
  --local constellationsCSV = images .. "constellation_data.csv"

  --local constellationsCSV = asset.localResource("birdimages.csv")

  nodes = createConstellations("ImageConstellation", "Constellation Art", constellationsCSV)
  for _, n in ipairs(nodes) do
    openspace.addSceneGraphNode(n)
  end

  --openspace.action.registerAction(ShowImages)
  --openspace.action.registerAction(HideImages)

end)

asset.onDeinitialize(function()
  for _, n in ipairs(nodes) do
    openspace.removeSceneGraphNode(n.Identifier)
  end

  --openspace.action.removeAction(ShowImages)
  --openspace.action.removeAction(HideImages)

end)

for _, n in ipairs(nodes) do
  asset.export(n)
end
--asset.export("ShowImages", ShowImages.Identifier)
--asset.export("HideImages", HideImages.Identifier)


asset.meta = {
  Name = "Constellation Images",
  Version = "1.2",
  Description = "Artistic images depicting the constellations",
  Author = "James Hedberg",
  URL = "http://jameshedberg.com",
  License = "CC-BY"
}
