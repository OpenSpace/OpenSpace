-- CSV
local Test = {
  Identifier = "TexturedPointCloudExample_CSV",
  Renderable = {
    Type = "RenderablePointCloud",
    File = asset.resource("data/textured_csv/textured_points.csv"),
    DataMapping = {
      -- The name of the column in the CSV file that corresponds to the texture (should
      -- be an integer)
      TextureColumn = "texture",
      -- A Texture mapping file that provides information about which value/index
      -- corresponds to which texture file
      TextureMapFile = asset.resource("data/textured_csv/texturemap.tmap")
    },
    Texture = {
      -- Where to find the texture files (in this case, in the OpenSpace data folder)
      Folder = openspace.absPath("${DATA}")
    },
    UseAdditiveBlending = false
  },
  GUI = {
    Name = "Multi-Textured Points",
    Path = "/Example/Point Clouds/Multi-Textured"
  }
}


-- Interpolated
-- Multi-texturing works also for interpolated point clouds. Here we let the same
-- dataset as used above be interpreted as representing only two points, with a different
-- texture. Note that the textures will be set based on the first two data items and will
-- not be changed during interpolation
local Test_Interpolated = {
  Identifier = "TexturedPointCloudExample_Interpolated",
  Renderable = {
    Type = "RenderableInterpolatedPoints",
    File = asset.resource("data/textured_csv/textured_points.csv"),
    NumberOfObjects = 2,
    DataMapping = {
      TextureColumn = "texture",
      TextureMapFile = asset.resource("data/textured_csv/texturemap.tmap")
    },
    Texture = {
      Folder = openspace.absPath("${DATA}")
    },
    UseAdditiveBlending = false
  },
  GUI = {
    Name = "Multi-Textured Points (Interpolation)",
    Path = "/Example/Point Clouds/Multi-Textured"
  }
}

-- Speck file (allows storing all data in one single file, including the texture mapping)
-- Note that we disable this scene graph node per default here, as it shows the same
-- information as the CSV version
local Test_Speck = {
  Identifier = "TexturedPointCloudExample_Speck",
  Renderable = {
    Type = "RenderablePointCloud",
    Enabled = false,
    -- When loading multi-texture information from a speck file, we do not need a
    -- DataMapping entry - all information is in the file
    File = asset.resource("data/textured_speck/textures_points.speck"),
    Texture = {
      -- However, we do still need to specify where the textures are located
      Folder = openspace.absPath("${DATA}")
    },
    UseAdditiveBlending = false
  },
  GUI = {
    Name = "Multi-Textured Points (Speck file)",
    Path = "/Example/Point Clouds/Multi-Textured"
  }
}


asset.onInitialize(function()
  openspace.addSceneGraphNode(Test)
  openspace.addSceneGraphNode(Test_Interpolated)
  openspace.addSceneGraphNode(Test_Speck)
end)

asset.onDeinitialize(function()
  openspace.removeSceneGraphNode(Test_Speck)
  openspace.removeSceneGraphNode(Test_Interpolated)
  openspace.removeSceneGraphNode(Test)
end)

asset.export(Test)
asset.export(Test_Interpolated)
asset.export(Test_Speck)


asset.meta = {
  Name = "Multi-textured Points",
  Version = "1.0",
  Description = [[Example of point clouds where multiple textures are used for the points,
    based on information in the dataset. The dataset may be either CSV or Speck format.
    If CSV is used, additional information must be provided through the DataMapping: 1)
    Which column in the dataset that corresponds to the texture, and a separate file that
    maps that value to a texture file
  ]],
  Author = "OpenSpace Team",
  URL = "http://openspaceproject.com",
  License = "MIT license"
}
