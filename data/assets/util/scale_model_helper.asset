local earthAsset = asset.require('scene/solarsystem/planets/earth/earth')
local sunAsset = asset.require('scene/solarsystem/sun/sun')

local createModelFolder = function(name, syncFolder)

    local folder = asset.syncedResource({
      Name = "Scale Model " .. name,
      Type = "HttpSynchronization",
      Identifier = syncFolder,
      Version = 1
    })

    return folder
end

local createModel = function(identifier, lat, lon, altitude, scale, modelScale,
    rotationVector, name, modelFolder, modelFile)

    local model = {
      Identifier = identifier,
      Parent = earthAsset.Earth.Identifier,
      --Note: Lat/Lon/Scale values comes from alignment with Esri World Imagery 2D layer
      Transform = {
        Translation = {
          Type = "GlobeTranslation",
          Globe = earthAsset.Earth.Identifier,
          Latitude = lat,
          Longitude = lon,
          Altitude = altitude,
          UseHeightmap = true
        },
        Rotation = {
          Type = "GlobeRotation",
          Globe = earthAsset.Earth.Identifier,
          Latitude = lat,
          Longitude = lon,
          UseHeightmap = false
        },
        Scale = {
          Type = "StaticScale",
          Scale = scale
        }
      },
      Renderable = {
        Type = "RenderableModel",
        GeometryFile = modelFolder .. modelFile,
        RotationVector = rotationVector,
        ModelScale = modelScale,
        LightSources = { sunAsset.LightSource }
      },
      GUI = {
        Name = name,
        Path = "/Scale Objects"
      }
    }

    return model
end

local createDropAction = function(identifier, name, guiPath)
  local updatePositionAction = {
    Identifier = "os.drop_" .. identifier,
    Name = "Drop " .. name .. " Building under camera",
    Command = [[
      local lat, lon, alt = openspace.globebrowsing.getGeoPositionForCamera();
      local camera = openspace.navigation.getNavigationState();
      openspace.setParent(']] .. identifier .. [[', camera.Anchor)
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Translation.Globe', camera.Anchor);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Translation.Latitude', lat);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Translation.Longitude', lon);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Rotation.Globe', camera.Anchor);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Rotation.Latitude', lat);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Rotation.Longitude', lon);
    ]],
    Documentation = "Updates the " .. name .. " position based on the globe location of the camera",
    GuiPath = "/" .. guiPath,
    IsLocal = false
  }

  return updatePositionAction
end

local createResetAction = function(identifier, name, lat, lon, guiPath)
  local resetPositionAction = {
    Identifier = "os.reset_" .. identifier,
    Name = "Reset " .. name .. " position",
    Command = [[
      -- same position as above
      local lat = ]] .. lat .. [[
      local lon = ]] .. lon .. [[
      local globe = ']] .. earthAsset.Earth.Identifier .. [['
      openspace.setParent(']] .. identifier .. [[', globe)
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Translation.Globe', globe);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Translation.Latitude', lat);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Translation.Longitude', lon);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Rotation.Globe', globe);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Rotation.Latitude', lat);
      openspace.setPropertyValueSingle('Scene.]] .. identifier .. [[.Rotation.Longitude', lon);
    ]],
    Documentation = "Updates the " .. name .. " position based on the globe location of the camera",
    GuiPath = "/" .. guiPath,
    IsLocal = false
  }

  return resetPositionAction
end

asset.export("createModelFolder", createModelFolder)
asset.export("createModel", createModel)
asset.export("createDropAction", createDropAction)
asset.export("createResetAction", createResetAction)
