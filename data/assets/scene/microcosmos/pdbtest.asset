local sunTransforms = asset.require("scene/solarsystem/sun/transforms")

local moleculeDb = "https://home.thissma.fr/moldata/"

local moleculeFiles = asset.syncedResource({
  Name = "Molecule File",
  Type = "UrlSynchronization",
  Identifier = "molecule_file",
  Url = {
    moleculeDb .. "full.xyz",
    moleculeDb .. "full.arc",
    moleculeDb .. "1mh1.pdb",
    moleculeDb .. "inside-md-npt.gro",
    moleculeDb .. "inside-md-pullout.xtc",
    moleculeDb .. "centered.gro",
    moleculeDb .. "centered.xtc",
    moleculeDb .. "o2.arc",
  }
})

-- local PdbTest = {
--   Identifier = "PdbTest",
--   -- Parent = sunTransforms.SunCenter.Identifier,
--   Renderable = {
--     Type = "RenderableMolecule",
--     MoleculeFile = moleculeFiles .. "1mh1.pdb",
--     -- TrajectoryFile = moleculeFiles .. "centered.xtc",
--   },
--   GUI = {
--     Path = "/Microcosmos/Molecules/Simulation"
--   }
-- }

local PdbTest = {
  Identifier = "PdbTest",
  -- Parent = sunTransforms.SunCenter.Identifier,
  Renderable = {
    Type = "RenderableSimulationBox",
    MoleculeFile = moleculeFiles .. "o2.arc",
    -- TrajectoryFile = moleculeFiles .. "o2.arc",
    MoleculeCount = 1000,
    LinearVelocity = 10.0,
    AngularVelocity = 60.0 / 360.0 * 3.14,
    SimulationBox = { 200.0, 200.0, 200.0 },
    CollisionRadius = 2.0,
  },
  GUI = {
    Path = "/Microcosmos/Molecules/Simulation"
  }
}

asset.onInitialize(function()
  openspace.addSceneGraphNode(PdbTest)
end)
    
asset.onDeinitialize(function()
  openspace.removeSceneGraphNode(PdbTest)
end)
    
asset.export(PdbTest)
