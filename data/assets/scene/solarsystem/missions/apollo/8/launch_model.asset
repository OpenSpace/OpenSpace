local asset_helper = asset.require('util/asset_helper')
local earth_transforms = asset.require('scene/solarsystem/planets/earth/transforms')
local kernels = asset.require('./kernels').kernels
local csm = asset.require('../apollo_csm')

local apolloSpiceId = "-908"

local Apollo8Launch = {
    Identifier = "Apollo8Launch",
    Parent = earth_transforms.EarthIAU.Identifier,
    TimeFrame = {
        Type = "TimeFrameInterval",
        Start = "1968 DEC 21",
        End = "1968 DEC 28"
    },
    Transform = {
        Translation = {
            Type = "SpiceTranslation",
            Target = apolloSpiceId,
            Observer = "EARTH",
            Frame = "IAU_EARTH",
            Kernels = kernels
        },
    },
    GUI = {
        Name = "Apollo 8 Launch Capsule",
        Path = "/Solar System/Missions/Apollo"
    }
}

local Apollo8LaunchModel = {
    Identifier = "Apollo8LaunchModel",
    Parent = Apollo8Launch.Identifier,
    TimeFrame = {
        Type = "TimeFrameInterval",
        Start = "1968 DEC 21",
        End = "1968 DEC 22"
    },
    Transform = {
        Scale = {
            Type = "StaticScale",
            -- The scale of the model is in cm; OpenSpace is in m
            Scale = 0.01
        },
        Rotation = {
            Type = "StaticRotation",
            Rotation = {0.0, 0.0, -3.1415 / 2}
        }
    },
    GUI = {
        Hidden = true,
        Name = "Apollo 8 Launch Model",
        Path = "/Solar System/Missions/Apollo/8"
    }
}

local launch_model_part = csm.createCsmModel(Apollo8LaunchModel.Identifier)

local list = { Apollo8Launch, Apollo8LaunchModel }
for k,v in pairs(launch_model_part) do
    v.GUI.Path = "/Solar System/Missions/Apollo/8/Model"
    table.insert(list, v)
end

asset_helper.registerSceneGraphNodesAndExport(asset, list)
