local assetHelper = asset.require('util/asset_helper')
local sunTransforms = asset.require('scene/solarsystem/sun/transforms')
local csm = asset.require('./apollo_csm')

asset.require('spice/base')

local kernelsFolder = asset.syncedResource({
    Name = "Apollo Kernels",
    Type = "HttpSynchronization",
    Identifier = "apollo_spice",
    Version = 1
})

local kernels = {
    kernelsFolder .. "/moon_080317.tf",
    kernelsFolder .. "/apollo8.tf",
    kernelsFolder .. "/moon_pa_de421_1900-2050.bpc",
    kernelsFolder .. '/apollo8.tsc',
    kernelsFolder .. '/apollo8.bsp',
    kernelsFolder .. '/apollo8_earthrise.bc',
}

local apolloSpiceId = "-908"

local Apollo8Launch = {
    Identifier = "Apollo8Launch",
    Parent = "Earth",
    TimeFrame = { -- Using Spice kernels for 1850-2150
        Type = "TimeFrameInterval",
        Start = "1968 DEC 21",
        End = "1968 DEC 28"
    },
    Transform = {
        Translation = {
            Type = "SpiceTranslation",
            Target = apolloSpiceId,
            Observer = "EARTH",
            Frame = "IAU_EARTH",         
            Kernels = kernels
        },
    },
    GUI = {
        Name = "Apollo 8 Launch Capsule",
        Path = "/Solar System/Missions/Apollo"
    }
}


local Apollo8 = {
    Identifier = "Apollo8",
    Parent = "EarthBarycenter",
    TimeFrame = { -- Using Spice kernels for 1850-2150
        Type = "TimeFrameInterval",
        Start = "1968 DEC 21",
        End = "1968 DEC 28"
    },
    Transform = {
        Translation = {
            Type = "SpiceTranslation",
            Target = apolloSpiceId,
            Observer = "EARTH BARYCENTER",
            Frame = "GALACTIC",         
            Kernels = kernels
        },
        Rotation = {
            Type = "SpiceRotation",
            SourceFrame = "A8_EARTHRISE",
            DestinationFrame = "GALACTIC",
            TimeFrame = {
                -- The orientation of Apollo 8 is only
                -- available during the few minutes when
                -- the famous Earthrise picture was taken.
                Type = "TimeFrameInterval",
                Start = "1968 DEC 24 16:37:19",
                End = "1968 DEC 24 16:40:15"
            }
        }
    },
    GUI = {
        Name = "Apollo 8",
        Path = "/Solar System/Missions/Apollo"
    }
}

local Apollo8LaunchModel = {
    Identifier = "Apollo8LaunchModel",
    Parent = Apollo8Launch.Identifier,
    Transform = {
        Scale = {
            Type = "StaticScale",
            -- The scale of the model is in cm; OpenSpace is in m
            Scale = 0.01
        },
        Rotation = {
            Type = "StaticRotation",
            Rotation = {0.0, 0.0, -3.1415/2}
        }
    },
    GUI = {
        Hidden = true,
        Name = "Apollo 8 Launch Model",
        Path = "/Solar System/Missions/Apollo"
    }
}

local Apollo8Model = {
    Identifier = "Apollo8Model",
    Parent = Apollo8.Identifier,
    Transform = {
        Scale = {
            Type = "StaticScale",
            -- The scale of the model is in cm; OpenSpace is in m
            Scale = 0.01
        },
        Rotation = {
            Type = "StaticRotation",
            Rotation = {0.0, 0.0, -3.1415/2}
        }
    },
    GUI = {
        Hidden = true,
        Name = "Apollo 8 Model",
        Path = "/Solar System/Missions/Apollo"
    }
}

local PivotOffset = { 0, 2.5, 0}

-- The pivot node is used for navigation inside the spacecraft

local Apollo8Pivot = {
    Identifier = "Apollo8Pivot",
    Parent = Apollo8.Identifier,
    Transform = {
        Translation = {
            Type = "StaticTranslation",
            Position = PivotOffset
        },
    },
    GUI = {
        Name = "Apollo 8 Pivot",
        Path = "/Solar System/Missions/Apollo"
    }
}


local Apollo8LaunchTrail = {
    Identifier = "Apollo8LaunchTrail",
    Parent = "Earth",
    Renderable = {
        Type = "RenderableTrailTrajectory",
        Translation = {
            Type = "SpiceTranslation",
            Target = apolloSpiceId,
            Observer = "EARTH",
            Frame = "IAU_EARTH",            
            Kernels = kernels
        },
        Color = { 0.70, 0.50, 0.20 },
        StartTime = "1968 DEC 21 12:51:00",
        EndTime = "1968 DEC 21 23:23:22",
        SampleInterval = 30
    },
    GUI = {
        Name = "Apollo 8 Launch Trail",
        Path = "/Solar System/Missions/Apollo"
    }
}

local Apollo8MoonTrail = {
    Identifier = "Apollo8MoonTrail",
    Parent = "Moon",
    Renderable = {
        Type = "RenderableTrailTrajectory",
        Translation = {
            Type = "SpiceTranslation",
            Target = apolloSpiceId,
            Observer = "MOON",
            Frame = "IAU_MOON",            
            Kernels = kernels
        },
        Color = { 0.70, 0.50, 0.20 },
        StartTime = "1968 DEC 23",
        EndTime = "1968 DEC 26",
        SampleInterval = 30,
        Enabled = false,
    },
    GUI = {
        Name = "Apollo 8 Moon Trail",
        Path = "/Solar System/Missions/Apollo"
    }
}

local Apollo8EarthBarycenterTrail = {
    Identifier = "Apollo8EarthBarycenterTrail",
    Parent = "EarthBarycenter",
    Renderable = {
        Type = "RenderableTrailTrajectory",
        Translation = {
            Type = "SpiceTranslation",
            Target = apolloSpiceId,
            Observer = "EARTH BARYCENTER",
            Frame = "GALACTIC",            
            Kernels = kernels
        },
        Color = { 1, 0.0, 0.0 },
        StartTime = "1968 DEC 21",
        EndTime = "1968 DEC 28",
        SampleInterval = 30,
        Enabled = false,
    },
    GUI = {
        Name = "Apollo 8 Earth Barycenter Trail",
        Path = "/Solar System/Missions/Apollo"
    }
}

local exportList = {
    Apollo8, 
    Apollo8Model,
    Apollo8Launch, 
    Apollo8LaunchModel,
    Apollo8Pivot,

    Apollo8LaunchTrail,
    Apollo8MoonTrail,
    Apollo8EarthBarycenterTrail
}

assetHelper.registerSceneGraphNodesAndExport(asset, exportList)
-- Registering Command and Service module needs to happen fter the export list
-- has been registered, since it depends on the Apollo8Model scene graph node.
csm.registerCsm(asset, Apollo8Model.Identifier)
csm.registerCsm(asset, Apollo8LaunchModel.Identifier)
