local transforms = asset.require('scene/solarsystem/sun/transforms')

function downloadSssbDatabaseFile(sceneAsset, name, identifier)
    assert(sceneAsset, "'asset' needs to be provided")
    assert(name, "'name' needs to be provided")
    assert(identifier, "'identifier'needs to be provided")

    return sceneAsset.syncedResource({
        Name = "Small SolarSystem Body Data (" .. name .. ")",
        Type = "HttpSynchronization",
        Identifier = identifier,
        Version = 1
    })
end

local createSssbGroupObject = function(filename, sssbFolder, trailColor)
    assert(filename, "'filename' needs to be provided")
    assert(sssbFolder, "'sssbFolder' needs to be provided")
    trailColor = trailColor or { 0.75, 0.1, 0.1 }

    local filenameSansExt = filename:gsub(filename:match("(%.%w+)$"), "")
    return {
       Identifier = 'sssb_'..filenameSansExt,
       Parent = transforms.SunECLIPJ2000.Identifier,
       Renderable = {
            Type = "RenderableSmallBody",
            Path = sssbFolder.."/"..filename,
            Segments = 200,
            Color = trailColor,
            Fade = 0.5,
        },
        GUI = {
            Path = "/Solar System/Small Solar System Body"
       }
    }
end

asset.export("downloadSssbDatabaseFile", downloadSssbDatabaseFile)
asset.export("createSssbGroupObject", createSssbGroupObject)
