local transforms = asset.require("scene/solarsystem/planets/earth/transforms")
local sun = asset.require("scene/solarsystem/sun/transforms")
local coreKernels = asset.require("spice/core")



local models = asset.resource({
  Name = "ISS Models",
  Type = "HttpSynchronization",
  Identifier = "iss_model",
  Version = 3
})

local kernels = asset.resource({
  Name = "ISS Kernels",
  Type = "HttpSynchronization",
  Identifier = "iss_kernels",
  Version = 1
})

local omm = asset.resource({
  Name = "Satellite OMM Data (ISS)",
  Type = "UrlSynchronization",
  Identifier = "satellite_omm_data_iss",
  Url = "https://www.celestrak.com/NORAD/elements/gp.php?CATNR=25544&FORMAT=kvn",
  Filename = "ISS.txt",
  SecondsUntilResync = 24 * 60 * 60
})

local tle = asset.resource({
  Name = "Satellite TLE Data (ISS)",
  Type = "UrlSynchronization",
  Identifier = "satellite_tle_data_iss",
  Url = "https://www.celestrak.com/NORAD/elements/gp.php?CATNR=25544&FORMAT=tle",
  Filename = "ISS.txt",
  SecondsUntilResync = 24 * 60 * 60
})


local IssPosition = {
  Identifier = "ISSPosition",
  Parent = transforms.EarthInertial.Identifier,
  BoundingSphere = 54.5, -- half the width
  Transform = {
    Translation = {
      Type = "GPTranslation",
      Observer = transforms.EarthInertial.Identifier,
      File = omm .. "ISS.txt",
      Format = "OMM"
    }
  },
  Tag = { "earth_satellite", "ISS" },
  GUI = {
    Name = "ISS Position",
    Path = "/Solar System/Planets/Earth/Satellites/ISS",
    Hidden = true
  }
}

local IssModel = {
  Identifier = "ISS",
  Parent = IssPosition.Identifier,
  Transform = {
    Rotation = {
      Type = "SpiceRotation",
      SourceFrame = "ISS",
      DestinationFrame = coreKernels.Frame.J2000
    }
  },
  Renderable = {
    Type = "RenderableModel",
    GeometryFile = models .. "ISS.fbx",
    ModelScale = "Centimeter",
    LightSources = {
      sun.LightSource
    },
    PerformShading = true
  },
  Tag = { "earth_satellite", "ISS" },
  GUI = {
    Name = "ISS",
    Path = "/Solar System/Planets/Earth/Satellites/ISS"
  }
}

local IssTrail = {
  Identifier = "ISS_trail",
  Parent = transforms.EarthInertial.Identifier,
  Renderable = {
    Type = "RenderableTrailOrbit",
    Translation = {
      Type = "GPTranslation",
      Observer = transforms.EarthInertial.Identifier,
      File = omm .. "ISS.txt",
      Format = "OMM"
    },
    RenderBinMode = "PostDeferredTransparent",
    Color = { 0.9, 0.6715, 0.0 },
    Fade = 1.5,
    Resolution = 320
  },
  Tag = { "earth_satellite", "ISS" },
  GUI = {
    Name = "ISS Trail",
    Path = "/Solar System/Planets/Earth/Satellites/ISS"
  }
}

-- @TODO (emmbr, 2021-05-27) add to scene when label rendering issues have been fixed
local IssLabel = {
  Identifier = "IssLabel",
  Parent = IssPosition.Identifier,
  Renderable = {
    Type = "RenderableLabel",
    Enabled = false,
    Text = "ISS",
    FontSize = 70.0,
    Size = 3.4,
    MinMaxSize = { 1, 100 },
    OrientationOption = "Camera View Direction",
    BlendMode = "Additive",
    EnableFading = true,
    FadeDistances = { 0.15, 15.0 },
    FadeWidths = { 1.0, 25.0 }
  },
  Tag = { "solarsystem_labels" },
  GUI = {
    Name = "ISS Label",
    Path = "/Solar System/Planets/Earth/Satellites"
  }
}

local FocusIss = {
  Identifier = "os.solarsystem.FocusIss",
  Name = "Focus on ISS",
  Command = [[
    openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.Aim", "")
    openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.Anchor", "ISS")
    openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.RetargetAnchor", nil)
  ]],
  Documentation = "Refocuses the camera on the ISS",
  GuiPath = "/Solar System/Earth",
  IsLocal = false
}


local kernelFile
asset.onInitialize(function()
  -- In order to get the orientation of the ISS correctly, we need to have its position
  -- available as a SPICE object. We don't want to just convert the TLE file once as we
  -- want it to update with every startup.
  -- For this reason we convert the TLE file into a type 10 SPICE kernel and since we are
  -- already doing that, we can also get a more accurate position for free, too
  local translation, kernel = openspace.space.tleToSpiceTranslation(tle .. "ISS.txt")
  kernelFile = kernel -- Store the path for the deinitialize function
  openspace.spice.loadKernel(kernelFile)

  openspace.spice.loadKernel(kernels .. "iss.tf")

  local i = openspace.space.readKeplerFile(omm .. "ISS.txt", "OMM")
  IssTrail.Renderable.Period = i[1].Period / (60 * 60 * 24)


  openspace.addSceneGraphNode(IssPosition)
  openspace.addSceneGraphNode(IssModel)
  openspace.addSceneGraphNode(IssTrail)

  openspace.action.registerAction(FocusIss)
end)

asset.onDeinitialize(function()
  openspace.spice.unloadKernel(kernels .. "iss.tf")
  openspace.spice.unloadKernel(kernelFile)

  openspace.action.removeAction(FocusIss)

  openspace.removeSceneGraphNode(IssTrail)
  openspace.removeSceneGraphNode(IssModel)
  openspace.removeSceneGraphNode(IssPosition)
end)

asset.export(IssTrail)
asset.export(IssModel)
asset.export(IssPosition)



asset.meta = {
  Name = "ISS",
  Version = "3.0",
  Description = [[Model and Trail for ISS. Model from NASA 3D models, trail from
    Celestrak.]],
  Author = "OpenSpace Team",
  URL = "https://celestrak.com/",
  License = "NASA"
}
