local assetHelper = asset.require('util/asset_helper')
local satelliteHelper = asset.require('util/tle_helper')
local transforms = asset.require('scene/solarsystem/planets/earth/transforms')
local sunTransforms = asset.require('scene/solarsystem/sun/transforms')

local url = "https://celestrak.com/satcat/tle.php?CATNR=25544"
local identifier = "ISS"
local filename = "ISS.txt"
local nodes = {}
local tle = satelliteHelper.downloadTLEFile(asset, url, identifier, filename)

local modelsLocation = asset.syncedResource({
    Name = "ISS Models",
    Type = "HttpSynchronization",
    Identifier = "iss_model",
    Version = 1
})

local initializeAndAddNodes = function()

  local lineElement = satelliteHelper.makeSingleLineElement(tle, filename)
  local period = satelliteHelper.getPeriodFromElement(lineElement)
  local path = tle .. "/" .. filename

-- TLE data is only relevant in EarthInertial frame which means the model
-- will inherit some irrelevant rotations from its parent. To get around that
-- we perform the reverse rotation back to EarthBarycenter frame after applying
-- the TLE translation
  local iss = {
    Identifier = identifier,
    Parent = transforms.EarthInertial.Identifier,
    Transform = {
      Translation = {
        Type = "TLETranslation",
        Body = identifier,
        Observer = transforms.EarthInertial.Identifier,
        File = path,
        LineNumber = 1
      },
      Rotation = {
          Type = "SpiceRotation",
          SourceFrame = "GALACTIC",
          DestinationFrame = "J2000",
      }
    },
    Tag = { "earth_satellite", "ISS" },
    GUI = {
        Path = "/Solar System/Planets/Earth/Satellites/ISS",
        Hiden = true
    }
  }

  local issModel = {
    Identifier = identifier .. "_model",
    Parent = iss.Identifier,
    Transform = {
      Rotation = {
        Type = "FixedRotation",
        Attached = "ISS_model",
        XAxis = { 1.0, 0.0, 0.0 },
        XAxisOrthogonal = true,
        ZAxis = transforms.EarthInertial.Identifier
      }
    },
    Renderable = {
      Type = "RenderableModel",
      Geometry = {
        Type = "MultiModelGeometry",
        GeometryFile = modelsLocation .. "/iss.obj"
      },
      ColorTexture =  modelsLocation .. "/gray.png",
      LightSources = assetHelper.getDefaultLightSources(sunTransforms.SolarSystemBarycenter.Identifier)
    },
    Tag = { "earth_satellite", "ISS" },
    GUI = {
      Path = "/Solar System/Planets/Earth/Satellites/ISS"
    }
  }

  local issTrail = {
    Identifier = identifier .. "_trail",
    Parent = transforms.EarthInertial.Identifier,
    Renderable = {
        Type = "RenderableTrailOrbit",
        Translation = {
          Type = "TLETranslation",
          Body = identifier,
          Observer = transforms.EarthInertial.Identifier,
          File = path,
          LineNumber = 1
        },
        Color = { 0.9, 0.6715, 0.0 },
        Fade = 1.5,
        Period = period,
        Resolution = 320
      },
    Tag = { "earth_satellite", "ISS" },
    GUI = {
        Path = "/Solar System/Planets/Earth/Satellites/ISS"
    }
  }

  local myNodes = { iss, issModel, issTrail }

  for _, node in ipairs(myNodes) do
    openspace.addSceneGraphNode(node)
  end

  return myNodes
end

asset.onInitialize(function ()
  nodes = initializeAndAddNodes()
end)

asset.onDeinitialize(function ()
  openspace.removeSceneGraphNode(nodes[3].Identifier) -- Removing trail
  openspace.removeSceneGraphNode(nodes[1].Identifier) -- Removing ISS and model recursively
end)
