local globeIdentifier = asset.require("../../earth").Earth.Identifier


local Name = "Paleoclimate Proxies"
local Identifier = "noaa-sos-land-paleo_overlays"
local Description = [[Every year, particles eroding from the continents are transported 
to the oceans by the wind as dust and by rivers as sands and gravels. Once they get to 
the ocean, they mix with billions of tons of dead plankton shells, sink, and settle on 
the seafloor. There, they accumulate vertically in layers on top of previous years' 
material. Similarly, this year's snow accumulates on top of the previous years' snow at 
the polar regions in places like Greenland and Antarctica. Over time, this process forms 
new layers of ice. Trees, much the same way, add yearly layers of new cells in concentric 
circles just below their bark - called tree rings. And, in many caves around the world, 
the strength of the seasonal cycle of a wet monsoon followed by a dry season is recorded 
in the chemistry of stalagmites rising up from the cave floor, formed by drips of 
mineral-rich water from the roof of the cave]]
local URL = "https://sos.noaa.gov/catalog/datasets/paleoclimate-proxies/"


local syncedDirectory = asset.syncedResource({
  Name = Name,
  Type = "HttpSynchronization",
  Identifier = Identifier,
  Version = 1
})

local layer_base = {
  Identifier = Identifier,
  Name = Name,
  FilePath = syncedDirectory .. "4096.png",
  Description = Description
}

local layer_corals = {
  Identifier = Identifier .. "-corals",
  Name = Name .. " (Corals)",
  FilePath = syncedDirectory .. "corals.png",
  Description = Description
}

local layer_icerings = {
  Identifier = Identifier .. "-icerings",
  Name = Name .. " (Icerings)",
  FilePath = syncedDirectory .. "icerings.png",
  Description = Description
}

local layer_ocean = {
  Identifier = Identifier .. "-ocean",
  Name = Name .. " (Ocean)",
  FilePath = syncedDirectory .. "ocean.png",
  Description = Description
}

local layer_speleothem = {
  Identifier = Identifier .. "-speleothem",
  Name = Name .. " (Speleothem)",
  FilePath = syncedDirectory .. "speleothem.png",
  Description = Description
}

local layer_tree_rings = {
  Identifier = Identifier .. "-tree_rings",
  Name = Name .. " (Tree Rings)",
  FilePath = syncedDirectory .. "tree_rings.png",
  Description = Description
}

local legend = {
  Identifier = Identifier,
  Name = Name,
  Type = "ScreenSpaceImageLocal",
  TexturePath = syncedDirectory .. "legend.jpg",
  FaceCamera = false,
  Scale = 0.2,
  CartesianPosition = { 0.85, 0.0, -2.0 }
}


asset.onInitialize(function ()
  openspace.globebrowsing.addLayer(globeIdentifier, "ColorLayers", layer_base)
  openspace.globebrowsing.addLayer(globeIdentifier, "ColorLayers", layer_corals)
  openspace.globebrowsing.addLayer(globeIdentifier, "ColorLayers", layer_icerings)
  openspace.globebrowsing.addLayer(globeIdentifier, "ColorLayers", layer_ocean)
  openspace.globebrowsing.addLayer(globeIdentifier, "ColorLayers", layer_speleothem)
  openspace.globebrowsing.addLayer(globeIdentifier, "ColorLayers", layer_tree_rings)
  openspace.addScreenSpaceRenderable(legend);  
end)

asset.onDeinitialize(function()
  openspace.globebrowsing.deleteLayer(globeIdentifier, "ColorLayers", layer_base)
  openspace.globebrowsing.deleteLayer(globeIdentifier, "ColorLayers", layer_corals)
  openspace.globebrowsing.deleteLayer(globeIdentifier, "ColorLayers", layer_icerings)
  openspace.globebrowsing.deleteLayer(globeIdentifier, "ColorLayers", layer_ocean)
  openspace.globebrowsing.deleteLayer(globeIdentifier, "ColorLayers", layer_speleothem)
  openspace.globebrowsing.deleteLayer(globeIdentifier, "ColorLayers", layer_tree_rings)
  openspace.removeScreenSpaceRenderable(legend)
end)

asset.export(layer_base)
asset.export(layer_corals)
asset.export(layer_icerings)
asset.export(layer_ocean)
asset.export(layer_speleothem)
asset.export(layer_tree_rings)
asset.export(legend)

asset.meta = {
  Name = Name,
  Version = "1.0",
  Description = Description .. "Data provided by the National Oceanic and Atmospheric Administration",
  Author = "National Oceanic and Atmospheric Administration",
  URL = URL,
  License = "https://sos.noaa.gov/copyright/"
}
