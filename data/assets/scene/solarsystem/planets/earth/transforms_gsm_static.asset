local transforms = asset.require("scene/solarsystem/planets/earth/transforms")
local coreKernels = asset.require("spice/core")



local earthcentricKernels = asset.resource({
  Name = "Earthcenteric Frame Kernels",
  Type = "HttpSynchronization",
  Identifier = "earthcentric_frame_kernels",
  Version = 1
})

local Frame = {
  GSM_static = "GSM_STATIC" -- Geocentric Solar Magnetospheric
}

local GeocentricSolarMagnetosphericStatic  = {
  Identifier = "GeocentricSolarMagnetosphericStatic",
  Parent = transforms.EarthCenter.Identifier,
  Transform = {
    Rotation = {
      Type = "SpiceRotation",
      SourceFrame = Frame.GSM_static,
      DestinationFrame = coreKernels.Frame.Galactic
    }
  },
  GUI = {
    Name = "Geocentric Solar Magnetospheric Static",
    Path = "/Solar System/Planets/Earth",
    Description =[[The Kernel for this is the same as
      GSM (Geocentric Solar Magnetospheric), except it is using
      ECLIPJ2000 instead of IAU_EARTH for the secondary axis. GSM is defind as:
      +X is parallel to the geometric earth-sun position vector.
      +Z axis is normalized component of north centered geomagnetic dipole
      vector orthogonal to GSM +X axis.
      +Y completes the right-handed frame.
      - the origin of this frame is the center of mass of the Earth.]],
    Hidden = true
  }
}


asset.onInitialize(function()
  openspace.spice.loadKernel(earthcentricKernels .. "GSM_static.tf")
  openspace.addSceneGraphNode(GeocentricSolarMagnetosphericStatic )
end)

asset.onDeinitialize(function()
  openspace.removeSceneGraphNode(GeocentricSolarMagnetosphericStatic )
  openspace.spice.unloadKernel(earthcentricKernels .. "GSM_static.tf")
end)

asset.export("Frame", Frame)
asset.export(GeocentricSolarMagnetosphericStatic )



asset.meta = {
  Name = "Earth static GSM transforms",
  Version = "1.0",
  Description = "A static version of Earth transform GSM Reference Frame. Geocentric Solar Magnetospheric",
  Author = "CCMC",
  URL = "http://openspaceproject.com",
  License = "MIT license"
}
