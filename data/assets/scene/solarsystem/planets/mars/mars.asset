local transforms = asset.require('./transforms')
local assetHelper = asset.require('util/asset_helper')
asset.require("spice/base")
asset.request('./trail')



local textures = asset.syncedResource({
    Name = "Mars Textures",
    Type = "HttpSynchronization",
    Identifier = "mars_textures",
    Version = 1
})

-- local marsRadii = { 3396190.0, 3396190.0, 3376200.0 }
local marsRadii = { 3396190.0, 3396190.0, 3396190.0 }

local mapServiceConfigs = asset.localResource("map_service_configs")

local color_layers = {
    {
        Identifier = "MOC_WA_AMNH_Color",
        Name = "MOC WA AMNH Color",
        FilePath = mapServiceConfigs .. "/Utah/Mars_Color.wms",
        Enabled = true,
        Fallback =  {
            Name = "Mars Texture",
            FilePath = textures .. "/mars.jpg",
            Enabled = true
        }
    },
    {
        Identifier = "Viking_MDIM",
        Name = "Viking MDIM",
        FilePath = mapServiceConfigs .. "/MARS_Viking_MDIM21.wms"
    },
    {
        Identifier = "MOLA_Pseudo_Color",
        Name = "MOLA Pseudo Color",
        FilePath = mapServiceConfigs .. "/Utah/Mola_PseudoColor.wms"
    },
    {
        Identifier = "MOLA_HRSC",
        Name = "MOLA HRSC",
        FilePath = mapServiceConfigs .. "/Utah/Mola_HRSC.wms"
    },
    {
        Identifier = "Viking_MDIM_Utah",
        Name = "Viking MDIM [Utah]",
        FilePath = mapServiceConfigs .. "/Utah/Mdim.wms"
    },
    {
        Identifier = "Viking_MDIM_AWS",
        Name = "Viking MDIM [AWS]",
        FilePath = mapServiceConfigs .. "/AWS/Mdim.wms"
    },
    {
        Identifier = "MOLA_Pseudo_Color_AWS",
        Name = "MOLA Pseudo Color [AWS]",
        FilePath = mapServiceConfigs .. "/AWS/Mola_PseudoColor.wms"
    },
    {
        Identifier = "CTX_Mosaic_LiU",
        Name = "CTX Mosaic [LiU]",
        FilePath = mapServiceConfigs .. "/LiU/CTX.wms",
        BlendMode = "Color"
    },
    {
        Identifier = "CTX_Mosaic_Utah",
        Name = "CTX Mosaic [Utah]",
        FilePath = mapServiceConfigs .. "/Utah/CTX.wms",
        BlendMode = "Color"
    },
    {
        Identifier = "CTX_Mosaic_AWS",
        Name = "CTX Mosaic [AWS]",
        FilePath = mapServiceConfigs .. "/AWS/CTX.wms",
        BlendMode = "Color"
    },
    {
        Identifier = "Themis_IR_Day_Utah",
        Name = "Themis IR Day [Utah]",
        FilePath = mapServiceConfigs .. "/Utah/Themis_IR_Day.wms",
        BlendMode = "Color"
    },
    {
        Identifier = "Themis_IR_Night_Utah",
        Name = "Themis IR Night [Utah]",
        FilePath = mapServiceConfigs .. "/Utah/Themis_IR_Night.wms",
        BlendMode = "Color"
    },
    {
        Identifier = "Themis_IR_Day_AWS_",
        Name = "Themis IR Day [AWS]",
        FilePath = mapServiceConfigs .. "/AWS/Themis_IR_Day.wms",
        BlendMode = "Color"
    },
    {
        Identifier = "Themis_IR_Night_AWS",
        Name = "Themis IR Night [AWS]",
        FilePath = mapServiceConfigs .. "/AWS/Themis_IR_Night.wms",
        BlendMode = "Color"
    }
}

local overlay_layers = {
    {
        Identifier = "Indices",
        Type = "TileIndexTileLayer"
    },
    {
        Identifier = "Size_Reference",
        Name = "Size Reference",
        Type = "SizeReferenceTileLayer",
        Radii = marsRadii
    }
}

local height_layers = {
    {
        Identifier = "Mola",
        Name = "Mola Elevation",
        FilePath = mapServiceConfigs .. "/Mars_MGS_MOLA_DEM.wms",
        TilePixelSize = 90
    },
    {
        Identifier = "Mola_Europe",
        Name = "Mola Elevation [Europe]",
        FilePath = mapServiceConfigs .. "/LiU/Mola_Elevation.wms",
        Enabled = true,
        TilePixelSize = 90
    },
    {
        Identifier = "Mola_Utah",
        Name = "Mola Elevation [Utah]",
        FilePath = mapServiceConfigs .. "/Utah/Mola_Elevation.wms",
        TilePixelSize = 90
    },
    {
        Identifier = "Mola_AWS",
        Name = "Mola Elevation [AWS]",
        FilePath = mapServiceConfigs .. "/AWS/Mola_Elevation.wms",
        TilePixelSize = 90
    }
}

local Mars = {
    Identifier = "Mars",
    Parent = transforms.MarsBarycenter.Identifier,
    Transform = {
        Rotation = {
            Type = "SpiceRotation",
            SourceFrame = "IAU_MARS",
            DestinationFrame = "GALACTIC"
        }
    },
    Renderable = {
        Type = "RenderableGlobe",
        Radii = marsRadii,
        SegmentsPerPatch = 90,
        Layers = {
            ColorLayers = color_layers,
            Overlays = overlay_layers,
            HeightLayers = height_layers
        }
    },
    Tag = { "planet_solarSystem", "planet_terrestrial" },
    GUI = {
        Path = "/Solar System/Planets/Mars"
    }
}



assetHelper.registerSceneGraphNodesAndExport(asset, { Mars })
