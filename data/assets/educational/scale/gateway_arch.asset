local earthAsset = asset.require("scene/solarsystem/planets/earth/earth")
local sunAsset = asset.require("scene/solarsystem/sun/sun")



local modelFolder = asset.syncedResource({
  Name = "Scale Gateway Arch",
  Type = "HttpSynchronization",
  Identifier = "scale_model_gateway_arch",
  Version = 2
})


local Location = { 38.624640, -90.184940 }

local ScaleModel = {
  Identifier = "Scale_GatewayArch",
  Parent = earthAsset.Earth.Identifier,
  -- Note: Lat/Lon/Scale values come from alignment with Esri World Imagery 2D layer
  Transform = {
    Translation = {
      Type = "GlobeTranslation",
      Globe = earthAsset.Earth.Identifier,
      Latitude = Location[1],
      Longitude = Location[2],
      Altitude = 0.0,
      UseHeightmap = true
    },
    Rotation = {
      Type = "GlobeRotation",
      Globe = earthAsset.Earth.Identifier,
      Latitude = Location[1],
      Longitude = Location[2]
    },
    Scale = {
      Type = "StaticScale",
      Scale = 1.1
    }
  },
  Renderable = {
    Type = "RenderableModel",
    GeometryFile = modelFolder .. "GatewayArch.osmodel",
    RotationVector = { 0.0, 157.0, 0.0 },
    LightSources = { sunAsset.LightSource },
    ModelScale = "Centimeter"
  },
  GUI = {
    Name = "Gateway Arch",
    Path = "/Scale Objects"
  }
}

local UpdatePositionAction = {
  Identifier = "os.scalemodels.DropGatewayArch",
  Name = "Drop Gateway Arch under camera",
  Command = [[
    openspace.globebrowsing.setNodePositionFromCamera("Scale_GatewayArch")
  ]],
  Documentation = "Updates the Gateway Arch position based on the globe location of the camera",
  GuiPath = "/Scale Objects",
  IsLocal = false
}

local ResetPositionAction = {
  Identifier = "os.scalemodels.ResetGatewayArch",
  Name = "Reset Gateway Arch position",
  Command = [[
    openspace.globebrowsing.setNodePosition("Scale_GatewayArch", "]] .. earthAsset.Earth.Identifier .. [[", ]] .. Location[1] .. "," .. Location[2] .. ")",
  Documentation = "Resets the Gateway Arch back to its actual location",
  GuiPath = "/Scale Objects",
  IsLocal = false
}


asset.onInitialize(function()
  openspace.addSceneGraphNode(ScaleModel)

  openspace.action.registerAction(UpdatePositionAction)
  openspace.action.registerAction(ResetPositionAction)
end)

asset.onDeinitialize(function()
  openspace.action.removeAction(ResetPositionAction)
  openspace.action.removeAction(UpdatePositionAction)

  openspace.removeSceneGraphNode(ScaleModel)
end)

asset.export(ScaleModel)
asset.export("UpdatePositionAction", UpdatePositionAction.Identifier)
asset.export("ResetPositionAction", ResetPositionAction.Identifier)
